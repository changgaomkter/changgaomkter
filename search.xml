<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Software Engineering</title>
      <link href="/2023/09/26/Software-Engineering/"/>
      <url>/2023/09/26/Software-Engineering/</url>
      
        <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2><h3 id="software-cost">Software Cost</h3><ul><li><p>The costs of software on a PC are often greater than the hardwarecost.</p></li><li><p>More to maintain than it does to develop</p></li><li><p>Software engineering is concerned with cost-effective softwaredevelopment.</p></li></ul><h3 id="software-project-failure">Software Project failure</h3><ol type="1"><li>Increasing System Complexity.</li><li>Failure to use software engineering methods.</li></ol><blockquote><p>Exp:</p><p>It is fairly easy to write computer programs without using softwareengineering methods and techniques.</p></blockquote><h3 id="software-products">Software products</h3><ul><li><p>Generic products</p><blockquote><p>Sold to customer</p></blockquote><blockquote><blockquote><p><strong>Graphics programs</strong>, <strong>Project managementtools</strong>; <strong>CAD</strong> software; Software for specificmarkets such as <strong>appointments systems for dentists</strong></p></blockquote></blockquote></li><li><p>Customized products</p><blockquote><p>Software that is commissioned by a specific customer to meet theirown needs</p></blockquote><blockquote><blockquote><p><strong>Embedded control systems</strong>, <strong>Air trafficcontrol software</strong>, <strong>Traffic monitoring systems</strong>### Essential attributes of good software</p></blockquote></blockquote></li><li><p>Maintainability</p></li><li><p>Dependability and Secutiry</p></li><li><p>Efficiency</p></li><li><p>Acceptability</p></li></ul><h3 id="all-aspects-of-software-production">All aspects of softwareproduction</h3><p>Not just technical process of development. Also project managementand the development of tools, methods etc. to support softwareproduction.</p><h3 id="importance-of-software-engineering">Importance of softwareengineering</h3><ul><li><p>More and more, individuals and society <strong>rely on</strong>advanced software systems.</p></li><li><p>It is usually <strong>cheaper</strong>, in the long run, to usesoftware engineering methods and techniques of software systems ratherthan just write the programs as if it was a personal programmingproject.</p></li></ul><h3 id="software-process-activities"><strong>Software processactivities</strong></h3><ol type="1"><li>Software <strong>specification</strong>.</li></ol><blockquote><p>customers and engineers define the software that is to be producedand the constraints on its operation</p></blockquote><ol start="2" type="1"><li>Software <strong>development</strong>.</li></ol><blockquote><p>where the software is designed and programmed</p></blockquote><ol start="3" type="1"><li>Software <strong>validation</strong>.</li></ol><blockquote><p>where the software is checked to ensure that it is what the customerrequires</p></blockquote><ol start="4" type="1"><li>Software <strong>evolution</strong>.</li></ol><blockquote><p>where the software is modified to reflect changing customer andmarket requirements</p></blockquote><h3 id="general-issues-that-affect-software">General issues that affectsoftware</h3><ul><li><p>Heterogeneity(不统一)</p><blockquote><p>Different types of computer and mobile devices.</p></blockquote></li><li><p>Business and social change</p><blockquote><p>They changing pincredibly quickly as emerging economies develop andnew technologies become abailabel.</p></blockquote></li><li><p>Security and Trust</p><blockquote><p>Software is intertwined with all aspects of our lives.</p></blockquote></li><li><p>Scale</p><blockquote><p>Be developed across a very wide range of scales, from very small<code>embedded systems</code> in portable or wearable devices through to<code>internet-scale</code>, <code>cloud-base</code> systems that servea global community.</p></blockquote></li></ul><h3 id="application-types">Application types</h3><table><colgroup><col style="width: 17%" /><col style="width: 63%" /><col style="width: 19%" /></colgroup><thead><tr class="header"><th style="text-align: left;">Types</th><th style="text-align: left;">Descripe</th><th style="text-align: left;">Example</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">Stand-alone applications</td><td style="text-align: left;">Run on a local computer, inclued allnecessary functionality and <strong>do not need</strong> to be connectedto a <strong>network</strong></td><td style="text-align: left;">Windows, Mac OS, Microsoft Word</td></tr><tr class="even"><td style="text-align: left;">Interactive transaction-basedapplications</td><td style="text-align: left;">Execute <strong>on a remotecomputer</strong> and are accessed by users from their own PCs orterminals.</td><td style="text-align: left;">web applications, e-commerceapplications</td></tr><tr class="odd"><td style="text-align: left;">Embedded control systems</td><td style="text-align: left;">control and manage <strong>hardwaredevices</strong>.</td><td style="text-align: left;">Medical Devices, Smartphones</td></tr><tr class="even"><td style="text-align: left;">Batch processing systems</td><td style="text-align: left;">Designed to process data in <strong>largebatches</strong>, always business systems. They process large numbers ofindividual inputs to create corresponding outputs.</td><td style="text-align: left;">phone billing systems, salary paymentsystems.</td></tr><tr class="odd"><td style="text-align: left;">Entertainment systems</td><td style="text-align: left;">Are primarily for personal use and whichare intended to <strong>entertain</strong> the user(<code>They can connect to the network</code>)</td><td style="text-align: left;">Games</td></tr><tr class="even"><td style="text-align: left;">Systems for modelling and simulation</td><td style="text-align: left;">Are developed by<strong>scientists</strong> and <strong>engineers</strong> to** model**physical processes or situations</td><td style="text-align: left;">Matlab</td></tr><tr class="odd"><td style="text-align: left;">Data collection systems</td><td style="text-align: left;"><strong>Collect</strong> data from theirenvironment using a <strong>set of sensors</strong> and <strong>sendthat data</strong> to other systems for processing.</td><td style="text-align: left;">wilderness weather station</td></tr><tr class="even"><td style="text-align: left;">Systems of systems</td><td style="text-align: left;">Are composed of a number of other softwaresystems</td><td style="text-align: left;">School systems. Programmingenvironments.</td></tr></tbody></table><h3 id="software-engineering-fundamentals">Software engineeringfundamentals</h3><ul><li>Using a managed and understood <strong>developmentprocess</strong>.</li><li><strong>Dependability</strong> and <strong>performance</strong> areimportant for all types of system</li><li>Understanding and managing the software<strong>specification</strong> and <strong>requirements</strong> areimportant</li><li><strong>Reuse</strong> software that has <strong>already</strong>been developed rather than write new software</li></ul><h3 id="web-based-software-engineering">Web-based softwareengineering</h3><ul><li>Complex distributed systems</li><li>Use the same fundamental ideas as other types of softwaresystem</li><li>Software reuse is important</li><li>Incremental and agile development</li><li>Service-oriented systems (the software components are stand-aloneweb services)</li><li>Rich interfaces</li></ul><h3 id="software-engineering-ethics">Software engineering ethics</h3><ul><li>Involves <strong>wider responsibilities</strong> than simply theapplication of technical skills.</li><li>Must behave in an <strong>honest</strong> and<strong>ethically</strong> responsible way if they are to be respectedas professionals.</li><li>Ethical behaviour is <strong>more</strong> than simply upholding thelaw but <strong>involves</strong> <strong>following</strong> a set of<strong>principles</strong> that are <strong>morally</strong>correct.</li></ul><h3 id="uml-diagrams-unified-modelling-language">UML diagrams (UnifiedModelling Language)</h3><ol type="1"><li>Class Diagrams</li></ol><p>information structure realtionships between data items</p><p>modular structure for the system <imgsrc="https://jsd.cdn.zzko.cn/gh/waterkingest/image_bed@master/20230927/image.421p62lfxes0.webp"alt="image" /></p><ol start="2" type="1"><li>Use Cases</li></ol><p>user's view, lists functions, visual overview of the mainrequirements</p><figure><imgsrc="https://pic4.zhimg.com/80/v2-5215f48daa00f92fb457bd57e6a9ad9f_1440w.webp"alt="UseCases" /><figcaption aria-hidden="true">UseCases</figcaption></figure><ol start="3" type="1"><li>UML Package Diagrams</li></ol><p>Overall architecture, Dependencies between components</p><figure><imgsrc="https://jsd.cdn.zzko.cn/gh/waterkingest/image_bed@master/20230927/image.11w4xkewjkg0.webp"alt="image" /><figcaption aria-hidden="true">image</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> Software Engineering </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linear_Algebra</title>
      <link href="/2023/08/24/Linear-Algebra/"/>
      <url>/2023/08/24/Linear-Algebra/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linear System</title>
      <link href="/2023/07/01/linear-System/"/>
      <url>/2023/07/01/linear-System/</url>
      
        <content type="html"><![CDATA[<h2 id="introduction-to-design-of-system">Introduction to Design ofSystem</h2><ul><li>Performance Specification(性能规范)</li></ul><h3 id="time-domain-and-frequency-domain">Time domain and Frequencydomain</h3><iframe src="//player.bilibili.com/player.html?aid=763994121&bvid=BV1zr4y1C7Pv&cid=434388964&page=1" width="100%" height="300px" frameborder="0" loading="lazy" allowfullscreen></iframe><h4 id="example">Example:</h4><p>Start with a simple sinusoidal signal. Frequency 5Hz, period 0.2s,amplitude 5.(正弦信号，频率5Hz，周期0.2s，幅度5)<br /><span class="math display">\[x(t)=5\sin(2 \pi*5t)\]</span></p><figure><imgsrc="https://cdn.staticaly.com/gh/waterkingest/image_bed@master/20230701/image.gany1okfxj4.webp"alt="Time domain image" /><figcaption aria-hidden="true">Time domain image</figcaption></figure><figure><imgsrc="https://cdn.staticaly.com/gh/waterkingest/image_bed@master/20230701/image.3rsupco66a60.webp"alt="Frequency domain image" /><figcaption aria-hidden="true">Frequency domain image</figcaption></figure><figure><imgsrc="https://cdn.staticaly.com/gh/waterkingest/image_bed@master/20230701/image.2gpw60dti3s0.webp"alt="The relationship between Time domain and frequency domain" /><figcaption aria-hidden="true">The relationship between Time domain andfrequency domain</figcaption></figure><figure><imgsrc="https://upload.wikimedia.org/wikipedia/commons/7/72/Fourier_transform_time_and_frequency_domains_%28small%29.gif"alt="Wiki" /><figcaption aria-hidden="true">Wiki</figcaption></figure><h3 id="fourier-transform"><strong>Fourier Transform</strong></h3><p><span class="math display">\[\begin{array}{c}X_{k}=\sum_{n=0}^{N-1} x_{n} \cdot e^{-i 2 \pi k n / N} \\\\x_{n}=\frac{1}{N} \sum_{k=0}^{N-1} X_{k} \cdot e^{i 2 \pi k n / N}\end{array}\]</span></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> Linear System </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pygame(1)</title>
      <link href="/2022/12/23/Pygame-1/"/>
      <url>/2022/12/23/Pygame-1/</url>
      
        <content type="html"><![CDATA[<p>该系列将跟随<ahref="https://www.pygame.org/wiki/tutorials">Pygame官方文档</a>)进行学习</p>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> Python </tag>
            
            <tag> Pygame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鹏城历险记</title>
      <link href="/2022/05/25/shenzhen/"/>
      <url>/2022/05/25/shenzhen/</url>
      
        <content type="html"><![CDATA[<ul><li>考完雅思后改了改简历投了一下，在经历了一个多月的5次面试后终于是混到了华为OD的一份offer。定在了5月26号在深圳入职。<imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220611/48089D4A4EB9FEA0977129EEFCD6049D.c1r0awg3y54.webp"alt="48089D4A4EB9FEA0977129EEFCD6049D" /> <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220611/993806471ABACD5ACED19048CF849E73.sj3e8qc684g.webp"alt="工卡" /></li></ul><h2 id="月28日">5月28日</h2><p>刚来第3天就收到了任总的端午礼盒，属实有点受宠若惊 <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220611/E0F3AF227D69199DD3055AA000B4C71C.4llwvm8w4fw0.webp"alt="E0F3AF227D69199DD3055AA000B4C71C" /></p><h2 id="月29日">5月29日</h2><p>收到了小高的投喂 <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220611/CFE2525BB1B46F4A7FFB80AB20D76E7A.38hw650lxyk0.webp"alt="小高投喂" /></p><h2 id="月2日">6月2日</h2><p>拿到了第一份菊厂的宵夜，赛百味+车厘子+特仑苏，针不戳！ <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220611/DB07F001D690F411F20A849679731441.1s3bn0585nk0.webp"alt="DB07F001D690F411F20A849679731441" /></p><h2 id="月3日">6月3日</h2><p>端午放假第一天，到吴总家一起恰了顿饭 <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220611/40C7658A6A5713E6B0203A2130A009EC.1qu12pbft2gw.webp"alt="40C7658A6A5713E6B0203A2130A009EC" /></p><h2 id="月4日">6月4日</h2><p>踩着滑板在深圳湾公园兜了一圈，还去马哥的滨海大厦望了望。 <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220611/85457D6BB3673BC6CB31AA414648A64D.5dwpxk1fw0w0.webp"alt="85457D6BB3673BC6CB31AA414648A64D" /></p><h2 id="月9号">6月9号</h2><p>早上6点，被窗外的阳光照醒了，阳光洒在滑板上还挺好看。 <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220611/F8BBF2B4687C66CD3009949991DD282A.2mtrh9hrwq20.webp"alt="F8BBF2B4687C66CD3009949991DD282A" /></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LIFE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine learning--数学相关（2）</title>
      <link href="/2022/05/03/Machine-learning-%E6%95%B0%E5%AD%A6%E7%9B%B8%E5%85%B3%EF%BC%882%EF%BC%89/"/>
      <url>/2022/05/03/Machine-learning-%E6%95%B0%E5%AD%A6%E7%9B%B8%E5%85%B3%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="vector-spaces向量空间">Vector Spaces(向量空间)</h1><h2 id="groups群">Groups（群)</h2><p>Consider a set <span class="math inline">\(\mathcal{G}\)</span> andan operation <span class="math inline">\(\otimes: \mathcal{G} \times\mathcal{G} \rightarrow \mathcal{G}\)</span> defined on <spanclass="math inline">\(\mathcal{G}\)</span>. Then <spanclass="math inline">\(G:=(\mathcal{G}, \otimes)\)</span> is called agroup if the following hold:<br />1. Closure of <span class="math inline">\(\mathcal{G}\)</span> under<span class="math inline">\(\otimes: \forall x, y \in \mathcal{G}: x\otimes y \in \mathcal{G}\)</span><br />2. Associativity: <span class="math inline">\(\forall x, y, z \in\mathcal{G}:(x \otimes y) \otimes z=x \otimes(y \otimesz)\)</span><br />3. Neutral element: <span class="math inline">\(\exists e \in\mathcal{G} \forall x \in \mathcal{G}: x \otimes e=x\)</span> and <spanclass="math inline">\(e \otimes x=x\)</span><br />4. Inverse element: <span class="math inline">\(\forall x \in\mathcal{G} \exists y \in \mathcal{G}: x \otimes y=e\)</span> and <spanclass="math inline">\(y \otimes x=e\)</span>, where <spanclass="math inline">\(e\)</span> is the neutral element. We often write<span class="math inline">\(x^{-1}\)</span> to denote the inverseelement of <span class="math inline">\(x\)</span>.</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> Machine learning </tag>
            
            <tag> 线代 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程爬虫</title>
      <link href="/2022/05/01/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2022/05/01/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="目的">目的</h1><p>为了提高爬虫效率，实现多线程同步运行，比如一秒同时爬取50个连接。主要用到的是python自带的多线程库<code>threading</code># 实现 首先引用所需要的库 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br></pre></td></tr></table></figure></p><h2 id="notice">Notice</h2><p>需要注意的是两个参数</p><ol type="1"><li><code>locks = threading.Lock()#线程锁</code>主要用来多线程对单一资源进行写入的时候，能锁住所有线程，避免多个线程同时对一个资源进行读写操作</li><li><code>threadmax = threading.BoundedSemaphore(50)#总线程数</code>设置一下这个爬虫系统最大的线程数，避免资源过度消耗，或者线程无限增加导致被爬取的服务器出现宕机等情况</li></ol><h2 id="主要代码">主要代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Duoxiancheng</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.start_time = time.time()</span><br><span class="line">        self.num = <span class="number">0</span></span><br><span class="line">        self.result=[]</span><br><span class="line">        self.datas=[]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writedata</span>(<span class="params">self</span>):</span></span><br><span class="line">        mu.acquire(<span class="literal">True</span>) <span class="comment">#在多线程写入同一个资源时开启线程锁</span></span><br><span class="line">        self.insert_mysql(self.result)<span class="comment">#插入数据库</span></span><br><span class="line">        self.writefile(self.result)<span class="comment">#写入本地文件</span></span><br><span class="line">        self.result=[]</span><br><span class="line">        mu.release()<span class="comment">#写完文件后释放线程锁，别的线程将继续工作</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_mysql</span>(<span class="params">self,items</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            db = pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">3306</span>, user=<span class="string">&#x27;root&#x27;</span>, passwd=<span class="string">&#x27;admin123456&#x27;</span>,</span><br><span class="line">                                db=<span class="string">&#x27;Spider&#x27;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">            cursor = db.cursor()</span><br><span class="line">            cursor.execute(<span class="string">&#x27;use Spider;&#x27;</span>)</span><br><span class="line">            cursor.execute(<span class="string">&#x27;CREATE TABLE IF NOT EXISTS flight(&#x27;</span></span><br><span class="line">                            <span class="string">&#x27;id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,&#x27;</span></span><br><span class="line">                            <span class="string">&#x27;airlineName VARCHAR(30),&#x27;</span></span><br><span class="line">                            <span class="string">&#x27;flightNumber VARCHAR(30),&#x27;</span></span><br><span class="line">                            <span class="string">&#x27;craftTypeName VARCHAR(30),&#x27;</span></span><br><span class="line">                            <span class="string">&#x27;dcity VARCHAR(30),&#x27;</span></span><br><span class="line">                            <span class="string">&#x27;acity VARCHAR(30),&#x27;</span></span><br><span class="line">                            <span class="string">&#x27;dealtime VARCHAR(30),&#x27;</span></span><br><span class="line">                            <span class="string">&#x27;arrivalDate VARCHAR(30),&#x27;</span></span><br><span class="line">                            <span class="string">&#x27;price VARCHAR(30),&#x27;</span></span><br><span class="line">                            <span class="string">&#x27;datetime VARCHAR(30));&#x27;</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">                    nowtime=[<span class="built_in">str</span>((datetime.now()).strftime(<span class="string">&#x27;%Y-%m-%d %H:%M&#x27;</span>))]</span><br><span class="line">                    sql_query = <span class="string">&#x27;INSERT INTO flight(airlineName, flightNumber, craftTypeName, dcity,acity,dealtime,arrivalDate,price,datetime) VALUES (&quot;%s&quot;, &quot;%s&quot;, &quot;%s&quot;, &quot;%s&quot;,&quot;%s&quot;, &quot;%s&quot;, &quot;%s&quot;, &quot;%s&quot;, &quot;%s&quot;)&#x27;</span> % (</span><br><span class="line">                                item[<span class="number">0</span>], item[<span class="number">1</span>],item[<span class="number">2</span>],item[<span class="number">3</span>], item[<span class="number">4</span>],  item[<span class="number">5</span>],item[<span class="number">6</span>], item[<span class="number">7</span>],nowtime,)</span><br><span class="line">                    cursor.execute(sql_query)</span><br><span class="line">                db.commit()</span><br><span class="line">            <span class="keyword">except</span> pymysql.MySQLError <span class="keyword">as</span> e:</span><br><span class="line">                db.rollback()</span><br><span class="line">                print(e.args)</span><br><span class="line">        <span class="keyword">except</span> pymysql.MySQLError <span class="keyword">as</span> e:</span><br><span class="line">            print(e.args)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writefile</span>(<span class="params">self,data</span>):</span></span><br><span class="line">        这个函数用于将文件保存至本地文件，可以是excel，csv等</span><br><span class="line">        ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prepare_data</span>(<span class="params">self</span>):</span></span><br><span class="line">        这里将所要需要进行多线程的数据准备好，可以放在列表中然后将数据传入thread1函数开始创建线程</span><br><span class="line">        ...</span><br><span class="line">        self.thread1(data)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">self,*args,**kwarg</span>):</span></span><br><span class="line">        这里写需要爬取数据的相关代码</span><br><span class="line">        ...</span><br><span class="line">        threadmax1.release()<span class="comment">#最后记得release释放线程</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">thread1</span>(<span class="params">self,data</span>):</span></span><br><span class="line">            <span class="string">&quot;&quot;&quot;多线程&quot;&quot;&quot;</span></span><br><span class="line">            i=<span class="number">0</span>   </span><br><span class="line">            starlist=[]   </span><br><span class="line">            <span class="keyword">while</span> data:</span><br><span class="line">                dflist=data.pop(<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">if</span> i%<span class="number">50</span>==<span class="number">0</span>:</span><br><span class="line">                    print(<span class="string">&#x27;\r正在运行的线程数&#123;&#125;\n已经爬取 &#123;&#125;/&#123;&#125; 个&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(threading.active_count()),<span class="built_in">str</span>(i),<span class="built_in">str</span>(long)),flush=<span class="literal">True</span>)<span class="comment">#可以打印正在运行的线程数，实现监控</span></span><br><span class="line">                <span class="keyword">if</span> dflist:</span><br><span class="line">                    time.sleep(<span class="number">0.1</span>)             </span><br><span class="line">                    threadmax1.acquire()<span class="comment">#从空闲的线程中取一个线程</span></span><br><span class="line">                    data1=dflist[<span class="number">0</span>]</span><br><span class="line">                    data2=dflist[<span class="number">1</span>]</span><br><span class="line">                    data3=dflist[<span class="number">2</span>]</span><br><span class="line">                    t = Thread(target=self.task, args=(data1,data2,data3,))<span class="comment">#创建一个运行task的线程，传入参数             </span></span><br><span class="line">                    i+=<span class="number">1</span></span><br><span class="line">                    starlist.append(t)</span><br><span class="line">                    time.sleep(<span class="number">0.01</span>)</span><br><span class="line">                    t.start()  <span class="comment">#线程开始运行 </span></span><br><span class="line">                    self.num +=<span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> self.ques%<span class="number">1000</span>==<span class="number">0</span>: <span class="comment">#这个是用于爬取1000次以后写入一次数据</span></span><br><span class="line">                        t2=Thread(target=self.writedata)</span><br><span class="line">                        t2.start()</span><br><span class="line">                    t.start()</span><br><span class="line">            <span class="keyword">for</span> z <span class="keyword">in</span> starlist:</span><br><span class="line">                z.join()<span class="comment">#设定守护线程，主线程会等所有子线程都运行完毕后才结束，保证所有线程的数据最后都会由主线程的最后一步写入数据   </span></span><br><span class="line">            self.writedata()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        end_time = time.time()</span><br><span class="line">        print(<span class="string">&#x27;一共花费时间:&#123;&#125;(单位秒)&#x27;</span>.<span class="built_in">format</span>(end_time - self.start_time))   </span><br></pre></td></tr></table></figure><h1id="通常多线程还会涉及到代理ip池的运用">通常多线程还会涉及到代理ip池的运用</h1><p>相较于免费的代理ip，付费的会更加稳定，为了避免打广告，我这里不推荐哪一个公司的产品，感兴趣可以私信我，下面提供一个较为通用的通过付费ip池构建一个项目的代理ip池的方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ip_from</span>():</span></span><br><span class="line">    <span class="keyword">global</span> ip_list</span><br><span class="line">    print(<span class="string">&#x27;获取ip&#x27;</span>)</span><br><span class="line">    proxyurl=<span class="string">&#x27;你自己申请的代理ip api&#x27;</span></span><br><span class="line">    prox=requests.get(proxyurl).text.split(<span class="string">&#x27;\r\n&#x27;</span>)</span><br><span class="line">    ip_list=prox</span><br></pre></td></tr></table></figure> 此时<strong>ip_list</strong>就存好了申请一次的ip，最便宜的那一档往往是一次几百个，有效期1到5分钟，因此需要一个线程每4分钟运行一次，更新这个ip池<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Timer</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time1</span>():</span></span><br><span class="line">    t1=<span class="number">4</span>*<span class="number">60</span></span><br><span class="line">    t = Timer(t1, get_ip_from)</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure>同时获取ip的方法也要加上一个延时的参数，在调用一次更新ip池后再次等待4分钟进行下一次的ip获取<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ip_from</span>():</span></span><br><span class="line">    <span class="keyword">global</span> ip_list,task_continue</span><br><span class="line">    print(<span class="string">&#x27;获取ip&#x27;</span>)</span><br><span class="line">    proxyurl=<span class="string">&#x27;你自己申请的代理ip api&#x27;</span></span><br><span class="line">    prox=requests.get(proxyurl).text.split(<span class="string">&#x27;\r\n&#x27;</span>)</span><br><span class="line">    ip_list=prox</span><br><span class="line">    <span class="keyword">if</span> task_continue:</span><br><span class="line">        time1()</span><br></pre></td></tr></table></figure> 在实现网络访问的函数中加入 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">prox=ipp_list[random.randint(<span class="number">0</span>, <span class="built_in">len</span>(ip_list))]</span><br><span class="line">proxies = &#123;</span><br><span class="line">            <span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;http://&#x27;</span> +prox ,</span><br><span class="line">            <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;https://&#x27;</span>+prox,</span><br><span class="line">            &#125;</span><br><span class="line">response=requests.get(<span class="string">&#x27;url&#x27;</span>,headers=headers,cookies=cookies,proxies=proxies)</span><br></pre></td></tr></table></figure>实现通过代理ip访问,当然加入try能保证每一线程都能使用到有效ip进行获取数据<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result=requests.get(<span class="string">&#x27;url&#x27;</span>,headers=headers,cookies=cookies,proxies=proxies)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        prox=ip_list[random.randint(<span class="number">0</span>, <span class="built_in">len</span>(ipp_list))]</span><br><span class="line">        print(<span class="string">&#x27;更换ip&#x27;</span>)</span><br><span class="line">        proxies = &#123;</span><br><span class="line">                    <span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;http://&#x27;</span> +prox ,</span><br><span class="line">                    <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;https://&#x27;</span>+prox,</span><br><span class="line">                    &#125; </span><br></pre></td></tr></table></figure> 以上就是关于爬虫所能用到的一些多线程的使用方法了。</p>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>M. Omair Ahmad&#39;s artical(2)</title>
      <link href="/2022/04/24/M-Omair-Ahmad-s-artical-2/"/>
      <url>/2022/04/24/M-Omair-Ahmad-s-artical-2/</url>
      
        <content type="html"><![CDATA[<h1id="a-deep-light-weight-image-super-resolution-network-using-multi-scale-spatial-and-morphological-feature-generating-residual-blocks">ADeep Light-Weight Image Super Resolution Network Using Multi-ScaleSpatial and Morphological Feature Generating Residual Blocks</h1><h2 id="introduction">Introduction</h2><p>In this artical, the scholars mention a novel residual block with acapability of producing features corresponding to the textures andstructures of high quality images by introducion in it the morphologicaloperations of erosion, dilation, opening and closing is proposed andused in a residual convolutional network for the task of image superresolution.(他们提出了新型的残差结构，引入了侵蚀，扩张，打开和关闭等形态学操作来产生与高分辨率图像的纹理和结构相对应的特征，同时用于提升图像分辨率任务的残差卷积神经网络)</p><h2 id="previous-research">Previous research</h2><p>Include <strong>deep light-weight image super resolution neuralnetworks</strong>, <strong>deep image super resolution networks usingedge and gradient information</strong> and <strong>image superresolution schemes using morphological information</strong>. ### DRRNThis is a super resolution convolutional neural network employing aresidual block of two convolutional layers, which is usedrecurisively(被递归调用). This method reduces the number ofparameters.(运行要的参数减少了)However, since this network uses a largenumber of recursions in order to increase its depth virtually andprovide a high super resolution performance, the number of operationsrequired by it is very large.(操作增加了) Which prohibits the deploymentof DRRN in applications requiring low-power consumption andhigh-=execution speed.（没办法实现低功耗，高速度） ### CARN This is anexample of a high performance deep convolutional neural network thatemploys small numbers of parameters and operations to provide highquality super resolvedimages.(使用少量的参数和操作来实现高质量的超分辨率影像)The lightness ofthis network in terms of numbers of parameters and operations can beattributed mainly to the use of group convolutions, even though theyresult in lowering its performance.(使用群组卷积（groupconvolutions)可以减少参数和操作数，但是会降低性能。)</p><p>......</p><h2 id="proposed-image-super-resolution-scheme.">Proposed image superresolution scheme.</h2><p>They develop the proposed residual block, and then present thearchitecture of the super resolution network employing this block.</p><h3 id="proposed-residual-block">Proposed residual block</h3><p>This block consists of three modules, a multi-scale spatial featuregeneration module, a morphological feature generation module, and afeature fusion module.(3个模块：多尺度空间特征生成模块，形态学特征生成模块和特征融合模块)Theinput feature tensor x is simultaneously fed to the two featuregeneration modules.（输入的特征张量x同时被送入两个特征生成模块） In themulti-scale spatial featuregeneration module, the feature tensor xundergoes the operations of convolution and dilated convolution inparallel producing（在多尺度空间特征生成模块中，特征张量x通过卷积和扩张卷积的并行操作）, respectively, the featuretensors u1 and u2, as given by <span class="math display">\[u1=W_1(x)\]</span> <span class="math display">\[u2=W_2(X)\]</span> Both convolution operation <spanclass="math inline">\(W_1\)</span> and the dilated convolution operation<span class="math inline">\(W_2\)</span> employ 32 filters each withkernel size 3*3 and the dilation rate in <spanclass="math inline">\(W_2\)</span> is 2. Thus, the feature tensors <spanclass="math inline">\(u_1\)</span> and <spanclass="math inline">\(u_2\)</span> are obtained at two different scales.They add the feature tensor <span class="math inline">\(u_1\)</span>which is free of gridding artifacts, to the feature tensor <spanclass="math inline">\(u_2\)</span> producing the feature tensor <spanclass="math inline">\(u_3\)</span>, and this operation can diminish theeffect of artifacts(伪影). The feature tensors <spanclass="math inline">\(u_1\)</span> and <spanclass="math inline">\(u_3\)</span></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> 论文阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>M. Omair Ahmad&#39;s artical(1)</title>
      <link href="/2022/04/22/M-Omair-Ahmad-s-artical/"/>
      <url>/2022/04/22/M-Omair-Ahmad-s-artical/</url>
      
        <content type="html"><![CDATA[<h1id="a-low-complexity-modified-thinet-algorithm-for-pruning-convolutional-neural-networks">ALow-Complexity Modified ThiNet Algorithm for Pruning ConvolutionalNeural Networks</h1><h2 id="introduction">Introduction</h2><p>In this artical, scholars proposed a faster version of the ThiNetalgorithm(F-ThiNet). They want to remove all the filters from thenetwork and can be selected in a single step rather than selecting thefilters one by one iteratively.</p><h2 id="f-thinet">F-ThiNet</h2><p>In the ThiNet method, K filters from a total of <spanclass="math inline">\(H_l\)</span> filters of the <spanclass="math inline">\(l^{th}\)</span> convolutional layer are removed sothat their removal has the minimum effect on an aggregate value of acombination of the values of some selected entries in the out put of the<span class="math inline">\((l+1)^{st}\)</span> convolutional layer,using m input images.ThiNet use the equations below to choose thefilters. <span class="math display">\[A_{T}=\sum_{i=1}^{m}\left(\sum_{j \in T} \hat{X}_{i,j}^{l+1}\left[p_{1}, p_{2},p_{3}\right]\right)^{2}                                        (1)\]</span> <span class="math display">\[argmin\{A_T\}                               (2)\]</span> <span class="math inline">\(\hat{X}_{i, j}^{l+1}\left[p_{1},p_{2}, p_{3}\right]\)</span> is the value of the entry of the output ofthe <span class="math inline">\((l+1)^{st}\)</span> convolutional layergenerated by the <span class="math inline">\(i^{th}\)</span> input imageand filter j in the subset T of indices of the filters in the <spanclass="math inline">\(l^{th}\)</span> convolutional layer.</p><p>In <strong>F-Thinet</strong>, in each iteration, the index of onadditional filter from the <span class="math inline">\(l^{th}\)</span>convolutional layer is added toit.(意思是每次迭代会选一个卷积层中的一个卷积核剔除掉) In the beginningof the <span class="math inline">\(r^{th}\)</span> iteration, the set Thas indices of r-1 that were selected from the <spanclass="math inline">\(l^{th}\)</span> convolutional layer in theprevious iterations.(第r次迭代以后，就已经选取了r-1个需要剔除的卷积核).During the <span class="math inline">\(r^{th}\)</span> iteration, thesize of the set T is increased by unity by adding to it the index ofthat filter from the remaining filters of the <spanclass="math inline">\(l^{th}\)</span> convolutional layer that uses (1)and (2).(在第r次迭代中，通过thinet的公式进行选取需要剔除的卷积核)Whenthe filter in the <span class="math inline">\(r^{th}\)</span> iterationis selected, the argmin(求该函数有最小结果时候的取值) in ThiNet(2)operates on <span class="math inline">\(H_l\)</span> values computed inThiNet(1). For each of these <span class="math inline">\(H_l\)</span>values, the number of multiplications per image needed is given by <spanclass="math display">\[N_{l, r, I}=\left[\left(\sum_{i=1}^{l-1} C_{i, H_{i}}\right)+C_{l, r}+rI k_{l+1}^{2}\right]\]</span></p><p><span class="math inline">\(C_{\mu, \nu}=\nu k_{\mu}^{2} H_{\mu-1}L_{\mu} W_{\mu}\left(\mu=1, \ldots, \Omega ; \nu=1, \ldots,H_{\mu}\right)\)</span> and I is the number of selected entries in theoutput of the <span class="math inline">\((l+1)^{st}\)</span>convolutionallayer.(这两个变量是代表第l+1层卷积层的输出中所选出来的数据)The threeterms in this equation compute, respectively, the number ofmultiplications in the convolutional layers preceding the pruned layerl, the number of the multiplications in the <spanclass="math inline">\(l^{th}\)</span> layer when it contains r filters,and the number of multiplications in the <spanclass="math inline">\((l+1)^{st}\)</span> convolutional layer when eachfilter has rchannels.(公式中的3个部分分别代表了修剪卷积层l前相乘的数量，第l层包含r个过滤器（卷积核）是进行相乘的数量以及在（l+1)卷积层中每个filter包含r个通道时相乘的数量。）</p><p>伪代码如下：<br /><imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220423/image.1tq0a4efpi80.webp"alt="image" /></p><p>In <strong>ThiNet</strong>,to select K filters from the <spanclass="math inline">\(l^{th}\)</span> convolutional layer needs <spanclass="math inline">\(\sum_{i=1}^{K}\left(H_{l}-i+1\right) N_{l, i,I}\)</span> multiplications. But in <strong>F-ThiNet</strong> they onlyneed <span class="math inline">\(H_lN_{l,1,I}\)</span> which isindependent of K. Therefore, the computations needed to select K filtersin the <span class="math inline">\(l^{th}\)</span> convolutional layerin the F-ThiNet algorithm is the same as the amount of computationsneeded for the selection of the first filter in the ThiNet algorithm,thus making the proposed F-Thinet algorithm to have a significantlyreduced complexity.</p><h2 id="experiments">Experiments</h2><p>The ThiNet and F-ThiNet are individually emmployed by scholars forpruning two different networks, VGG-16 and AlexNet, on two datasets,CIFAR-10 and Fashino-MNIST.<br /><imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220423/image.62i3wrtn06s0.webp"alt="image" /></p><p>This picture shows the accuracy reduction (AR) of VGG-16 withCIFAR-10 dataset images as its input, when the same % of filters fromall its convolutional layers is pruned using ThiNet and F-ThiNet vsnumber of FLOPs required.(FLOPs means 每秒浮点计算数) <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220423/image.b8sv3loqhl4.webp"alt="image2" /></p><p>This picture shows the accuracy reduction (AR) of VGG-16 withFashion-MNIST dataset images as its input, when the same % of filtersfrom all its convolutional layers is pruned using ThiNet and F-ThiNet vsnumber of FLOPs required.</p><p>It is seen from this figure that generally there is no significantdifference in the accuracy reduction of the pruned networks resultingfrom the two algorithms, irrespective of the percentage of filtersremoved. On the other hand, the proposed F-ThiNet algorithm requiresmuch less number of FLOPs for pruning the network.</p><h2 id="conclusion">Conclusion</h2><p>There is a very significant difference in the number of FLOPsrequired by the two pruning methods in that the number FLOPs required byF-ThiNet is less than 2% of that required by ThiNet.But the accuracybetween these two algorithm is about the same. So the major advantage ofthe proposed algorithm is that its time-complexity is significantlylower than that of ThiNet or any other state-of-the art algorithm.</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> 论文阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine learning--数学相关（1）</title>
      <link href="/2022/04/21/machine-learning_mathmatic/"/>
      <url>/2022/04/21/machine-learning_mathmatic/</url>
      
        <content type="html"><![CDATA[<h2 id="vectors向量">Vectors(向量)</h2><h4 id="geometric-vectors">Geometric vectors</h4><figure><imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220422/image.3cauuosz6qk0.webp"alt="image" /><figcaption aria-hidden="true">image</figcaption></figure><h4 id="polynomials多项式">Polynomials(多项式)</h4><p>2个polynomicals 可以加到一起成为另外一个polynomical</p><h4 id="audio-signals音频信号">Audio signals(音频信号)</h4><p>Audio signals are represented as a series of numbers.可以 add signalstogether, 然后他们的和就是另外一个audio signal.</p><h2 id="linear-equations线性方程">Linear Equations(线性方程)</h2><p><span class="math display">\[\begin{array}{c}a_{11} x_{1}+\cdots+a_{1 n} x_{n}=b_{1} \\\vdots \\a_{m 1} x_{1}+\cdots+a_{m n} x_{n}=b_{m}\end{array}\]</span> 可以转换成<br /><span class="math display">\[\left[\begin{array}{c}a_{11} \\\vdots \\a_{m 1}\end{array}\right] x_{1}+\left[\begin{array}{c}a_{12} \\\vdots \\a_{m 2}\end{array}\right] x_{2}+\cdots+\left[\begin{array}{c}a_{1 n} \\\vdots \\a_{m n}\end{array}\right] x_{n}=\left[\begin{array}{c}b_{1} \\\vdots \\b_{m}\end{array}\right]\]</span> 写成Matrice(矩阵)形式 <spanclass="math display">\[\left[\begin{array}{ccc}a_{11} &amp; \cdots &amp; a_{1 n} \\\vdots &amp; &amp; \vdots \\a_{m 1} &amp; \cdots &amp; a_{m n}\end{array}\right]\left[\begin{array}{c}x_{1} \\\vdots \\x_{n}\end{array}\right]=\left[\begin{array}{c}b_{1} \\\vdots \\b_{m}\end{array}\right]\]</span></p><h2 id="matrices矩阵">Matrices(矩阵)</h2><p><span class="math display">\[\boldsymbol{A}=\left[\begin{array}{cccc}a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1 n} \\a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2 n} \\\vdots &amp; \vdots &amp; &amp; \vdots \\a_{m 1} &amp; a_{m 2} &amp; \cdots &amp; a_{m n}\end{array}\right], \quad a_{i j} \in \mathbb{R}\]</span> (m,n)matrix Aconsist of m rows and n columns</p><h3 id="matrix-addition-and-multiplicationc">Matrix Addition andMultiplicationc</h3><h4 id="sum">Sum</h4><p>The sum of two matrices A,B is defined as the element-wise(元素层面)sum <spanclass="math display">\[\boldsymbol{A}+\boldsymbol{B}:=\left[\begin{array}{ccc}a_{11}+b_{11} &amp; \cdots &amp; a_{1 n}+b_{1 n} \\\vdots &amp; &amp; \vdots \\a_{m 1}+b_{m 1} &amp; \cdots &amp; a_{m n}+b_{m n}\end{array}\right] \in \mathbb{R}^{m \times n}\]</span></p><h4 id="multiplication">multiplication</h4><p>For matrices A(m<em>n), B(n</em>k), the elements <spanclass="math inline">\(c_{i,j}\)</span> of the product C=AB(m*k) arecomputed as <span class="math display">\[c_{i j}=\sum_{l=1}^{n} a_{i l}b_{l j}\]</span> 用<span class="math inline">\(A\cdot B\)</span>来denotemultiplication. 其中 Matrices can only be multiplied if their"neighboring" dimensions match, like this <spanclass="math display">\[\underbrace{\boldsymbol{A}}_{n \times k}\underbrace{\boldsymbol{B}}_{k \times m}=\underbrace{\boldsymbol{C}}_{n\times m}\]</span> 具体计算过程可以参考下面公式<br />For <span class="math inline">\(\boldsymbol{A}=\left[\begin{array}{lll}1&amp; 2 &amp; 3 \\ 3 &amp; 2 &amp; 1\end{array}\right] \in \mathbb{R}^{2\times 3}, \boldsymbol{B}=\left[\begin{array}{cc}0 &amp; 2 \\ 1 &amp; -1\\ 0 &amp; 1\end{array}\right] \in \mathbb{R}^{3 \times 2}\)</span> , weobtain</p><p><span class="math display">\[\begin{aligned}\boldsymbol{A} \boldsymbol{B} &amp;=\left[\begin{array}{lll}1 &amp; 2 &amp; 3 \\3 &amp; 2 &amp; 1\end{array}\right]\left[\begin{array}{cc}0 &amp; 2 \\1 &amp; -1 \\0 &amp; 1\end{array}\right]=\left[\begin{array}{cc}2 &amp; 3 \\2 &amp; 5\end{array}\right] \in \mathbb{R}^{2 \times 2} \\\boldsymbol{B} \boldsymbol{A} &amp;=\left[\begin{array}{cc}0 &amp; 2 \\1 &amp; -1 \\0 &amp; 1\end{array}\right]\left[\begin{array}{ccc}1 &amp; 2 &amp; 3 \\3 &amp; 2 &amp; 1\end{array}\right]=\left[\begin{array}{ccc}6 &amp; 4 &amp; 2 \\-2 &amp; 0 &amp; 2 \\3 &amp; 2 &amp; 1\end{array}\right] \in \mathbb{R}^{3 \times 3}\end{aligned}\]</span></p><h4 id="identity-matrix单位矩阵">Identity matrix(单位矩阵)</h4><p><spanclass="math display">\[\boldsymbol{I}_{n}:=\left[\begin{array}{cccccc}1 &amp; 0 &amp; \cdots &amp; 0 &amp; \cdots &amp; 0 \\0 &amp; 1 &amp; \cdots &amp; 0 &amp; \cdots &amp; 0 \\\vdots &amp; \vdots &amp; \ddots &amp; \vdots &amp; \ddots &amp; \vdots\\0 &amp; 0 &amp; \cdots &amp; 1 &amp; \cdots &amp; 0 \\\vdots &amp; \vdots &amp; \ddots &amp; \vdots &amp; \ddots &amp; \vdots\\0 &amp; 0 &amp; \cdots &amp; 0 &amp; \cdots &amp; 1\end{array}\right] \in \mathbb{R}^{n \times n}\]</span></p><h4 id="notice">Notice</h4><p>满足一些formula<br /><span class="math display">\[(AB)C=A(BC)\]</span> <spanclass="math display">\[(A+B)C=AC+BC\]</span> <spanclass="math display">\[A(C+D)=AC+AD\]</span> <spanclass="math display">\[I_m A=A I_n=A\]</span></p><h3 id="inverse-and-transpose">Inverse and Transpose</h3><h4 id="inverse">Inverse</h4><p>Consider a square matrix <span class="math inline">\(\boldsymbol{A}\in \mathbb{R}^{n \times n}\)</span>. Let matrix <spanclass="math inline">\(\boldsymbol{B} \in \mathbb{R}^{n \timesn}\)</span> have the property that <spanclass="math inline">\(\boldsymbol{A}\boldsymbol{B}=\boldsymbol{I}_{n}=\boldsymbol{B}\boldsymbol{A}\)</span>. <spanclass="math inline">\(\boldsymbol{B}\)</span> is called the inverse of<span class="math inline">\(\boldsymbol{A}\)</span> and denoted by <spanclass="math inline">\(\boldsymbol{A}^{-1}\)</span>.</p><p>Not every matrix A possesses an inverse <spanclass="math inline">\(A^{-1}\)</span>. If this inverse does exist, A iscalled regular/ invertible/ nonsingular, otherwise singular/noninvertible. When the matrix inverse exist, it is unique.</p><h4 id="transpose">Transpose</h4><p>For <span class="math inline">\(\boldsymbol{A} \in \mathbb{R}^{m\times n}\)</span> the matrix <span class="math inline">\(\boldsymbol{B}\in \mathbb{R}^{n \times m}\)</span> with <spanclass="math inline">\(b_{i j}=a_{j i}\)</span> is called the transposeof <span class="math inline">\(\boldsymbol{A}\)</span>. We write <spanclass="math inline">\(\boldsymbol{B}=\boldsymbol{A}^{\top}\)</span>.</p><h4 id="notice-1">Notice</h4><p>满足以下一些formula <span class="math display">\[\begin{aligned}\boldsymbol{A} \boldsymbol{A}^{-1}&amp;=\boldsymbol{I}=\boldsymbol{A}^{-1} \boldsymbol{A} \\(\boldsymbol{A} \boldsymbol{B})^{-1} &amp;=\boldsymbol{B}^{-1}\boldsymbol{A}^{-1} \\(\boldsymbol{A}+\boldsymbol{B})^{-1} &amp; \neq\boldsymbol{A}^{-1}+\boldsymbol{B}^{-1} \\\left(\boldsymbol{A}^{\top}\right)^{\top} &amp;=\boldsymbol{A} \\(\boldsymbol{A}+\boldsymbol{B})^{\top}&amp;=\boldsymbol{A}^{\top}+\boldsymbol{B}^{\top} \\(\boldsymbol{A} \boldsymbol{B})^{\top} &amp;=\boldsymbol{B}^{\top}\boldsymbol{A}^{\top}\end{aligned}\]</span></p><h3 id="multiplication-by-a-scalar标量">Multiplication by aScalar(标量)</h3><p>Let <span class="math inline">\(\boldsymbol{A} \in \mathbb{R}^{m\times n}\)</span> and <span class="math inline">\(\lambda \in\mathbb{R}\)</span>. Then <span class="math inline">\(\lambda\boldsymbol{A}=\boldsymbol{K}, K_{i j}=\lambda a_{i j}\)</span>.Practically, <span class="math inline">\(\lambda\)</span> scales eachelement of <span class="math inline">\(\boldsymbol{A}\)</span>. For<span class="math inline">\(\lambda, \psi \in \mathbb{R}\)</span>, thefollowing holds:</p><p>Associativity: <span class="math display">\[(\lambda \psi) \boldsymbol{C}=\lambda(\psi \boldsymbol{C}), \quad\boldsymbol{C} \in \mathbb{R}^{m \times n}\]</span> <span class="math display">\[\lambda(\boldsymbol{BC})=(\lambda \boldsymbol{B}) \boldsymbol{C}=\boldsymbol{B}(\lambda\boldsymbol{C})=(\boldsymbol{B} \boldsymbol{C}) \lambda, \quad\boldsymbol{B} \in \mathbb{R}^{m \times n}, \boldsymbol{C} \in\mathbb{R}^{n \times k}\]</span> Note that this allows us to move scalarvalues around. <span class="math display">\[(\lambda\boldsymbol{C})^{\top}=\boldsymbol{C}^{\top}\lambda^{\top}=\boldsymbol{C}^{\top} \lambda=\lambda\boldsymbol{C}^{\top}$ since $\lambda=\lambda^{\top}$ for all $\lambda\in \mathbb{R}\]</span> Distributivity: <span class="math display">\[\begin{array}{ll}(\lambda+\psi) \boldsymbol{C}=\lambda \boldsymbol{C}+\psi\boldsymbol{C}, &amp; \boldsymbol{C} \in \mathbb{R}^{m \times n} \\\lambda(\boldsymbol{B}+\boldsymbol{C})=\lambda \boldsymbol{B}+\lambda\boldsymbol{C}, &amp; \boldsymbol{B}, \boldsymbol{C} \in \mathbb{R}^{m\times n}\end{array}\]</span> If we define <span class="math display">\[\boldsymbol{C}:=\left[\begin{array}{ll}1 &amp; 2 \\3 &amp; 4\end{array}\right]\]</span> then for any <span class="math inline">\(\lambda, \psi \in\mathbb{R}\)</span> we obtain <span class="math display">\[\begin{aligned}(\lambda+\psi) \boldsymbol{C} &amp;=\left[\begin{array}{cc}(\lambda+\psi) 1 &amp; (\lambda+\psi) 2 \\(\lambda+\psi) 3 &amp; (\lambda+\psi) 4\end{array}\right]=\left[\begin{array}{cc}\lambda+\psi &amp; 2 \lambda+2 \psi \\3 \lambda+3 \psi &amp; 4 \lambda+4 \psi\end{array}\right] \\&amp;=\left[\begin{array}{cc}\lambda &amp; 2 \lambda \\3 \lambda &amp; 4 \lambda\end{array}\right]+\left[\begin{array}{cc}\psi &amp; 2 \psi \\3 \psi &amp; 4 \psi\end{array}\right]=\lambda \boldsymbol{C}+\psi \boldsymbol{C}\end{aligned}\]</span></p><h3 id="compact-representations-of-systems-of-linear-equations">Compactrepresentations of Systems of linear equations</h3><p>For example:</p><p><span class="math display">\[\begin{aligned}&amp;2 x_{1}+3 x_{2}+5 x_{3}=1 \\&amp;4 x_{1}-2 x_{2}-7 x_{3}=8 \\&amp;9 x_{1}+5 x_{2}-3 x_{3}=2\end{aligned}\]</span> and use the rules for matrix multiplication, we can write thisequation system in a more compact form as <span class="math display">\[\left[\begin{array}{ccc}2 &amp; 3 &amp; 5 \\4 &amp; -2 &amp; -7 \\9 &amp; 5 &amp; -3\end{array}\right]\left[\begin{array}{l}x_{1} \\x_{2} \\x_{3}\end{array}\right]=\left[\begin{array}{l}1 \\8 \\2\end{array}\right]\]</span></p><h2 id="solving-systems-of-linear-equations">Solving systems of linearequations</h2><h3 id="particular-and-general-solution特解和通解">Particular andGeneral Solution（特解和通解）</h3><p><strong>Example:</strong></p><p><span class="math display">\[\left[\begin{array}{cccc}1 &amp; 0 &amp; 8 &amp; -4 \\0 &amp; 1 &amp; 2 &amp; 12\end{array}\right]\left[\begin{array}{l}x_{1} \\x_{2} \\x_{3} \\x_{4}\end{array}\right]=\left[\begin{array}{c}42 \\8\end{array}\right]\]</span></p><p>The system has two equations and four unknows. In general we wouldexpect infinitely many solutions. This system of equations is in aparticularly easy form, where the first two columns consist of a 1 and a0. Remember that we want to find scalars x1,...x4, such that <spanclass="math inline">\(\sum_{i=1}^{4} x_{i}\boldsymbol{c}_{i}=\boldsymbol{b}\)</span>, where we define ci to be the<span class="math inline">\(i^th\)</span> column of the matrix and b theright-hand-side of above formula. A solution to the problem in thisexample can be found immediately by taking 42 times the first column and8 times the second column so that. <span class="math display">\[\boldsymbol{b}=\left[\begin{array}{c}42 \\8\end{array}\right]=42\left[\begin{array}{l}1 \\0\end{array}\right]+8\left[\begin{array}{l}0 \\1\end{array}\right]\]</span> Therefore, a solution is <spanclass="math inline">\([42,8,0,0]^{\top}\)</span>. This solution iscalled a particular solution or special solution. However, this is notthe only solution of this system of linear equations. To capture all theother solutions, we need to be creative in generating 0 in a non-trivialway using the columns of the matrix: Adding 0 to our special solutiondoes not change the special solution. To do so, we express the thirdcolumn using the first two columns (which are of this very simple form)<span class="math display">\[\left[\begin{array}{l}8 \\2\end{array}\right]=8\left[\begin{array}{l}1 \\0\end{array}\right]+2\left[\begin{array}{l}0 \\1\end{array}\right]\]</span> So that <span class="math inline">\(\mathbf{0}=8\boldsymbol{c}_{1}+2 \boldsymbol{c}_{2}-1 \boldsymbol{c}_{3}+0\boldsymbol{c}_{4}\)</span> and <span class="math inline">\(\left(x_{1},x_{2}, x_{3}, x_{4}\right)=(8,2,-1,0)\)</span>. In fact, any scaling ofthis solution by <span class="math inline">\(\lambda_{1} \in\mathbb{R}\)</span> produces the <spanclass="math inline">\(\mathbf{0}\)</span> vector, i.e., <spanclass="math display">\[\left[\begin{array}{cccc}1 &amp; 0 &amp; 8 &amp; -4 \\0 &amp; 1 &amp; 2 &amp; 12\end{array}\right]\left(\lambda_{1}\left[\begin{array}{c}8 \\2 \\-1 \\0\end{array}\right]\right)=\lambda_{1}\left(8 \boldsymbol{c}_{1}+2\boldsymbol{c}_{2}-\boldsymbol{c}_{3}\right)=\mathbf{0}\]</span></p><p>Following the same line of reasoning, we express the fourth column ofthe matrix in this example using the first two columns and generateanother set of non-trivial versions of 0 as <spanclass="math display">\[\left[\begin{array}{cccc}1 &amp; 0 &amp; 8 &amp; -4 \\0 &amp; 1 &amp; 2 &amp; 12\end{array}\right]\left(\lambda_{2}\left[\begin{array}{c}-4 \\12 \\0 \\-1\end{array}\right]\right)=\lambda_{2}\left(-4 \boldsymbol{c}_{1}+12\boldsymbol{c}_{2}-\boldsymbol{c}_{4}\right)=\mathbf{0}\]</span></p><p>for any <span class="math inline">\(\lambda_{2} \in\mathbb{R}\)</span>. Putting everything together, we obtain allsolutions of the equation system in the example, which is called thegeneral solution, as the set（以上的步骤是分辨设每个未知数为0，求出满足方程时别的未知数的大小，最终得到通解）<span class="math display">\[\left\{\boldsymbol{x} \in \mathbb{R}^{4}:\boldsymbol{x}=\left[\begin{array}{c}42 \\8 \\0 \\0\end{array}\right]+\lambda_{1}\left[\begin{array}{c}8 \\2 \\-1 \\0\end{array}\right]+\lambda_{2}\left[\begin{array}{c}-4 \\12 \\0 \\-1\end{array}\right], \lambda_{1}, \lambda_{2} \in \mathbb{R}\right\}\]</span></p><h3 id="elementary-transformations初等变换">ElementaryTransformations(初等变换)</h3><p>Can easyly understand by looking at the example below.</p><p><strong>Example</strong></p><p><span class="math display">\[\begin{array}{rlllrlrlrlr}-2 x_{1} &amp; + &amp; 4 x_{2} &amp; - &amp; 2 x_{3} &amp; - &amp;x_{4}&amp;+&amp;4 x_{5} &amp; = &amp; -3 \\4 x_{1} &amp; - &amp; 8 x_{2} &amp; + &amp; 3 x_{3} &amp; - &amp; 3x_{4} &amp; + &amp; x_{5} &amp; = &amp; 2 \\x_{1} &amp; - &amp; 2 x_{2} &amp; + &amp; x_{3} &amp; - &amp; x_{4}&amp; + &amp; x_{5} &amp; = &amp; 0 \\x_{1} &amp; - &amp; 2 x_{2} &amp; &amp; &amp; - &amp; 3x_{4}&amp;+&amp;4 x_{5} &amp; = &amp; a\end{array}\]</span></p><p>We start by convertiong this system of equations into the compactmatrix notation Ax=b. We no longer mention the variables x explicitlyand build the augmented matrix ( in the form [A|b]) <spanclass="math display">\[\left[\begin{array}{rrrrr|r}-2 &amp; 4 &amp; -2 &amp; -1 &amp; 4 &amp; -3 \\4 &amp; -8 &amp; 3 &amp; -3 &amp; 1 &amp; 2 \\1 &amp; -2 &amp; 1 &amp; -1 &amp; 1 &amp; 0 \\1 &amp; -2 &amp; 0 &amp; -3 &amp; 4 &amp; a\end{array}\right]\]</span> where we used the verical line to separate the left-hand sidefrom the right-hand side in the equation.<br /><strong>Swapping Rows 1 and 3 leads to</strong><br /><span class="math display">\[\left[\begin{array}{rrrrr|r}1 &amp; -2 &amp; 1 &amp; -1 &amp; 1 &amp; 0 \\4 &amp; -8 &amp; 3 &amp; -3 &amp; 1 &amp; 2 \\-2 &amp; 4 &amp; -2 &amp; -1 &amp; 4 &amp; -3 \\1 &amp; -2 &amp; 0 &amp; -3 &amp; 4 &amp; a\end{array}\right] \begin{array}{r}-4 R_{1} \\+2 R_{1} \\-R_{1}\end{array}\]</span> When we now apply the indicated transformations,we obtain<span class="math display">\[\begin{array}{l}\left[\begin{array}{rrrrr|r}1 &amp; -2 &amp; 1 &amp; -1 &amp; 1 &amp; 0 \\0 &amp; 0 &amp; -1 &amp; 1 &amp; -3 &amp; 2 \\0 &amp; 0 &amp; 0 &amp; -3 &amp; 6 &amp; -3 \\0 &amp; 0 &amp; -1 &amp; -2 &amp; 3 &amp; a\end{array}\right]\begin{array}{r}\\\\\\-R_{2}-R_{3}\end{array}\\\leadsto\left[\begin{array}{rrrrr|r}1 &amp; -2 &amp; 1 &amp; -1 &amp; 1 &amp; 0 \\0 &amp; 0 &amp; -1 &amp; 1 &amp; -3 &amp; 2 \\0 &amp; 0 &amp; 0 &amp; -3 &amp; 6 &amp; -3 \\0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; a+1\end{array}\right]\begin{array}{r}\\\cdot\left(-1\right)\\\cdot\left(-\frac{1}{3}\right)\\\end{array}\\\rightsquigarrow\left[\begin{array}{rrrrr|r}1 &amp; -2 &amp; 1 &amp; -1 &amp; 1 &amp; 0 \\0 &amp; 0 &amp; 1 &amp; -1 &amp; 3 &amp; -2 \\0 &amp; 0 &amp; 0 &amp; 1 &amp; -2 &amp; 1 \\0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; a+1\end{array}\right]\end{array}\]</span> Then we get the new equation <span class="math display">\[\begin{array}{rlllrlrlrlr}x_{1}&amp;-&amp;2 x_{2}&amp;+&amp;x_{3}&amp;-&amp;x_{4}&amp;+&amp;x_{5}&amp; = &amp; 0 \\&amp;&amp;&amp;&amp; x_{3}&amp;-&amp;x_{4}&amp;+&amp;3 x_{5} &amp; =&amp; -2 \\&amp; &amp;&amp;&amp;&amp;&amp; x_{4}&amp;-&amp;2 x_{5} &amp; = &amp; 1\\&amp; &amp; &amp;&amp;&amp;&amp;&amp; &amp; 0 &amp; = &amp; a+1\end{array}\]</span> Only for a =-1 this system can be solved. A particularsolution is <span class="math display">\[\left[\begin{array}{l}x_{1} \\x_{2} \\x_{3} \\x_{4} \\x_{5}\end{array}\right]=\left[\begin{array}{c}2 \\0 \\-1 \\1 \\0\end{array}\right]\]</span> The general solution, which captures the set of all possiblesolutions, is <span class="math display">\[\left\{\boldsymbol{x} \in \mathbb{R}^{5}:\boldsymbol{x}=\left[\begin{array}{c}2 \\0 \\-1 \\1 \\0\end{array}\right]+\lambda_{1}\left[\begin{array}{l}2 \\1 \\0 \\0 \\0\end{array}\right]+\lambda_{2}\left[\begin{array}{c}2 \\0 \\-1 \\2 \\1\end{array}\right], \quad \lambda_{1}, \lambda_{2} \in\mathbb{R}\right\}\]</span></p><h4 id="calculation-the-inverse">Calculation the inverse</h4><p>the method calls Gaussian Elimination</p><p><strong>Example:</strong> To determine the inverse of <spanclass="math display">\[\boldsymbol{A}=\left[\begin{array}{llll}1 &amp; 0 &amp; 2 &amp; 0 \\1 &amp; 1 &amp; 0 &amp; 0 \\1 &amp; 2 &amp; 0 &amp; 1 \\1 &amp; 1 &amp; 1 &amp; 1\end{array}\right]\]</span> we write down the augmented matrix <spanclass="math display">\[\left[\begin{array}{llll|llll}1 &amp; 0 &amp; 2 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 \\1 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 \\1 &amp; 2 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; 1 &amp; 0 \\1 &amp; 1 &amp; 1 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; 1\end{array}\right]\]</span> and use Gaussian elimination to bring it into reducedrow-echelon form <span class="math display">\[\left[\begin{array}{cccc|cccc}1 &amp; 0 &amp; 0 &amp; 0 &amp; -1 &amp; 2 &amp; -2 &amp; 2 \\0 &amp; 1 &amp; 0 &amp; 0 &amp; 1 &amp; -1 &amp; 2 &amp; -2 \\0 &amp; 0 &amp; 1 &amp; 0 &amp; 1 &amp; -1 &amp; 1 &amp; -1 \\0 &amp; 0 &amp; 0 &amp; 1 &amp; -1 &amp; 0 &amp; -1 &amp; 2\end{array}\right],\]</span> such that the ddesired inverse is given as its right-handside: <span class="math display">\[\boldsymbol{A}^{-1}=\left[\begin{array}{cccc}-1 &amp; 2 &amp; -2 &amp; 2 \\1 &amp; -1 &amp; 2 &amp; -2 \\1 &amp; -1 &amp; 1 &amp; -1 \\-1 &amp; 0 &amp; -1 &amp; 2\end{array}\right]\]</span> 将原矩阵和一个单位矩阵拼接在一起形成一个增广矩阵（augmentedmatrix) 对这个矩阵进行初等变换（ ElementaryTransformations）将左边变换为单位矩阵，则右边的矩阵就为原矩阵的逆矩阵</p><h4 id="algorithms-for-solving-a-system-of-linear-equations">Algorithmsfor solving a system of linear equations</h4><p>As for ordinary square matrix and invertible. We can use this formulato solve the question.</p><p><span class="math display">\[\boldsymbol{A}\boldsymbol{x}=\boldsymbol{b}\]</span> <spanclass="math display">\[\boldsymbol{x}=\boldsymbol{A}^{-1}\boldsymbol{b}\]</span></p><p>For other matrix in different structure, we use the formula below tosolve the question. <span class="math display">\[\boldsymbol{A x}=\boldsymbol{b} \Longleftrightarrow\boldsymbol{A}^{\top} \boldsymbol{A}\boldsymbol{x}=\boldsymbol{A}^{\top} \boldsymbol{b} \Longleftrightarrow\boldsymbol{x}=\left(\boldsymbol{A}^{\top} \boldsymbol{A}\right)^{-1}\boldsymbol{A}^{\top} \boldsymbol{b}\]</span></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> Machine learning </tag>
            
            <tag> 线代 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离散数学</title>
      <link href="/2022/04/18/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
      <url>/2022/04/18/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="mathematical-statements">Mathematical Statements</h2><h3 id="atomic-statements-and-molecular-statements">Atomic Statementsand Molecular Statements</h3><p>如果一个句子不能被分割成更小的声明，那就是atmoic的否则就是molecular的。<br />Example：<br /><strong>atomic的</strong><br />1. Telephone numbers in the USA have 10 digits.<br />2. The moon is made of chees.<br />3. 42 is a perfect square.<br />4. Every even number greather than 2 can be expressed as the sum of twoprimes.<br /><strong>molecular的</strong><br />Telephone numbers in the USA have 10 digits and 42 is a perfect square.### Logical Connectives:</p><table><thead><tr class="header"><th>symbol</th><th>read</th><th>meaning</th></tr></thead><tbody><tr class="odd"><td>∧</td><td>and</td><td>conjunction</td></tr><tr class="even"><td>∨</td><td>or</td><td>disjunction</td></tr><tr class="odd"><td>→</td><td>if..then</td><td>implication or conditional</td></tr><tr class="even"><td>↔︎</td><td>if and only if</td><td>biconditional</td></tr><tr class="odd"><td>¬</td><td>not</td><td>negation</td></tr></tbody></table><h4 id="notice">Notice</h4><ul><li>在implication的语句中，只有<strong>if</strong>部分是真<strong>then</strong>部分是假时整个statement才是 false的<br /></li><li><strong>Converse</strong>是指P→Q 和 Q→P的关系，一个implication的<strong>converse</strong>是否为真与original implication无关。</li><li><strong>Contrapositive</strong>指的是 P→Q 和 ¬Q→¬P的关系。一个implication的contraspositive和originalimplication的逻辑是相同的，要么both为真要不both为假</li></ul><h2 id="sets集合">Sets(集合)</h2><p>Set 就是一个无序(unordered)的对象集合。 <strong>Example:</strong><span class="math display">\[A=\{1,2,3\}\]</span> 读作“A is the setcontaining the elements 1,2 and 3"使用大括号(<strong>curlybraces</strong>)去enclose 这些 element。<br /><span class="math display">\[a \in \{a,b,c\}\]</span> The symbol <spanclass="math inline">\(\in\)</span> is read “is in” or “is an elementof.” 意思是a是这个集合中的一个元素（element）。<br /><strong>Special symbol</strong></p><table><colgroup><col style="width: 18%" /><col style="width: 81%" /></colgroup><thead><tr class="header"><th><strong>Symbol</strong></th><th><strong>Meaning</strong></th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(\emptyset\)</span></td><td>The <strong>empty set</strong> is the set which contains noelements.</td></tr><tr class="even"><td><span class="math inline">\(\mathcal{U}\)</span></td><td>The <strong>universe set</strong> is the sest of all elements.</td></tr><tr class="odd"><td><span class="math inline">\(\mathbb{N}\)</span></td><td>The set of natural numbers. That is, <spanclass="math inline">\(\mathcal{N}=\{0,1,2,3...\}\)</span></td></tr><tr class="even"><td><span class="math inline">\(\mathbb{Z}\)</span></td><td>The set of integers. That is, <spanclass="math inline">\(\mathcal{Z}=\{...-3,-2,-1,0,1,2,3...\}\)</span></td></tr><tr class="odd"><td><span class="math inline">\(\mathbb{Q}\)</span></td><td>The set of rational numbers.</td></tr><tr class="even"><td><span class="math inline">\(\mathbb{R}\)</span></td><td>The set of real numbers.</td></tr><tr class="odd"><td><span class="math inline">\(\mathcal{p}(A)\)</span></td><td>The poser set of any set A is the set of all subsets of A</td></tr></tbody></table><h2 id="function函数">Function(函数)</h2><p><imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220421/image.16iqk0bc664g.webp"alt="image" /><br /><imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220421/image.1rqitqd64s2o.webp"alt="image" /><br /><imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220421/image.6i7aifpo0e00.webp"alt="image" /><br /><imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220421/image.6aiwizqdxyo0.webp"alt="image" /></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> Discrete Mathematics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kharma&#39;s paper (2)</title>
      <link href="/2022/04/12/kharma-s-paper-2/"/>
      <url>/2022/04/12/kharma-s-paper-2/</url>
      
        <content type="html"><![CDATA[<h1id="adaptable-image-segmentation-via-simple-pixel-classification">Adaptableimage segmentation via simple pixel classification</h1><h2 id="introduction">Introduction</h2><p>Their image segmentation method combines 3 features: 1. Do not needto employ complex features(like color, texture, edge or other spaces) toreturn a better segmentation accuracies. 2. It uses a simple yetflexible multiscale spproach to local pixel heighborhood delineation,which is inspired by the concept of foveation. So it leads to a linearrather than a quadratic increase in the 3. It is a readilyparallelizable segmentation algorithm</p><h2 id="method">Method</h2><h3 id="training-phase">Training phase</h3><p>Input GT images(include hue, saturation, value and intensity or HSVIformat) to train.</p><p><imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220412/training_set.o3oin0xuqds.webp"alt="training_set" /> A set of training images.The upper right quarterand the lower right quarter of this Figure contain the full GT andpartial GT images corresponding to the OI in the upper left quartercolumn.</p><p>This method limite the number of classes in cureent implementation to64, including a no-class class.</p><p>Then construct a special data structure, called N-tree. N-tree ismade of N plains of "pixels". A pxel(<spanclass="math inline">\(P_{i,j,m-1}\)</span>)at position(i,j) within agiven layer(m), excecpt for layer 0( which is given),is a selectabelfunction(f)(eg, Gaussian blur) of a resizabel square neighborhood(<spanclass="math inline">\(N_{l,s}\)</span>) with odd-valued length <spanclass="math inline">\(l\)</span> and shift <spanclass="math inline">\(s\)</span> of the equivalent pixel in thepreceding level (m-1)</p><p><spanclass="math display">\[P_{i,j,m}=f(N_{l,s}(P_{i,j,m-1}))\]</span></p><p>look at the example below. <span class="math inline">\(l=3\)</span>and <span class="math inline">\(s=3\)</span>. Each pixel in theneighborhood N at level 1 results from the application of function <spanclass="math inline">\(f\)</span> to the underlying 3*3 neighborhood ofpixels at level0. At level 2, a pixel comes from function f as appliedto 9 pixels from level 1. However, these 9 pixels are not adjacent butare shifted apart by 3 pixels, in both dimensions. At level 3, a pixelresults from the application of function f to 9 pixels also, but thesepixels are now separated by <span class="math inline">\(3^2\)</span>pixels. Generally, shift <span class="math inline">\(s\)</span> betweenpixels in the square neighborhood of a central pixel at level m is equalto <span class="math inline">\(l^{m-1}\)</span>. <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220412/figure2.413trv9fwsk0.webp"alt="figure2" /></p><p>This Figure show a 2-dimensional slice of a 3*3 N-tree built using ashift value of 3, with levels 0,1,2 and 3 is showm. The lowermost layeris level 0, which is the original image</p><p>The whole process of preparing of Image can be seen from theimage.</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220412/process.7e42kpfoods0.webp"alt="process" /><figcaption aria-hidden="true">process</figcaption></figure><p>And the flow chart we can see below: <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220412/phase1.22yf79v9kr8g.webp"alt="phase1" /> Phase1 shows how to prepare the training instance.</p><p><imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220412/phase2,3.302tkhuo8vu0.webp"alt="phase2,3" /> Phase2 shows how to training classifer and Phase3shows how to segmented images.</p><h2 id="experimental-setup">Experimental setup</h2><h3 id="test-measures">Test measures</h3><p>This research uses the flowing formula to represent the effect ofeach methods. The measure algorithm we can see below. <spanclass="math display">\[TP\%=\frac{TP count}{TP count+FNcount}*100\]</span></p><p>TP means true positive, FP means false positive, TN means negativeand FN means false negative. <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220412/image.4q8eyymri040.webp"alt="image" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220412/image.4urv6hcsd140.webp"alt="image" /> This figure shows 5 different results which will bereturn by the classifier. Yellow regions are regions from the GT image,while blue regions come from the machine-segmented(MS)image, and gray isthe background. O/S is an oversegmented region(means segmented region islarger than the actural area); U/S is an undersegmented region(meanssegmented region is lower than the actural area); correct is a correctlysegmented region, while a missed region is not correctly segmented orO/S or U/S; Noise is an MS region with no ground truth equivalent.</p><h2 id="result">Result</h2><figure><imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220412/image.1vm1o65hqin4.webp"alt="image" /><figcaption aria-hidden="true">image</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> 论文阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kharma&#39;s paper (1)</title>
      <link href="/2022/04/11/Kharma-s-paper-Design-Convolutional-Neural-Networks/"/>
      <url>/2022/04/11/Kharma-s-paper-Design-Convolutional-Neural-Networks/</url>
      
        <content type="html"><![CDATA[<h1id="a-hybrid-evolutionary-algorithm-utilizing-novelty-search-and-local-optimization-used-to-design-convolutional-neural-networks-for-handwritten-digit-recognition">AHybrid Evolutionary Algorithm, Utilizing Novelty Search and LocalOptimization, Used to Design Convolutional Neural Networks forHandwritten Digit Recognition</h1><h2 id="abstract">Abstract</h2><p>These scholoars investigate the design of CNNs using <strong><ahref="https://blog.csdn.net/qq_44186838/article/details/109197192">CartesianGenetic programing(CGP)</a></strong>, an EA variant. And use<strong>Simulate Annealing</strong> to local optimize each optima. Andthis strategy can help to reduce lots of computational effort.</p><h2 id="details">Details</h2><p>They use threestage evolutionary optimization approach. First stageaims to generate a diverse initial generation of CNNs( using the NoveltySearch alogrithm). The second stage involves the evolution of CNNarchitectures (using the Catesian Genetic Programming). Third stage,they selects the most diverse generation from the previous stage.Finally use the stochastic local search(SLS) algorithm to exploit thelocal neighbourhoods.</p><h3 id="methods">Methods</h3><p>They evolve two separate populations of CNNs. The first population isbegininng with a randomly generated initial generation. The secondpopulation yields the initial generation for the evolutionary algorithm.Each designed of their networs combine two subnetwors: a fulyconvolution neural network followed by a fully connected(dense)network.</p><h3 id="genetic-encoding">Genetic Encoding</h3><p><imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220411/table1.5m8u6sb1asc0.webp"alt="table1" /> Fellowing the Table1 to design Sub-Network F: number offilters(output channels) K: Knerel size N: number of units in a denselayer</p><p><imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220411/figure1.55v4ye4nkrw0.webp"alt="figure1" /> The network structure we can see from this figure.</p><p><imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220411/vector-image.vwegw63tgog.webp"alt="vector-image" /> Phenotype of the best performing CNN architectureobtained by the proposed method, with the vector representation of eachlayer indicated. The figure illustrates the functions of each of themodules represented in the genotype illustrated in Figure 1. Thecoloured arrows indicate the various functions: DeconvBlock (green),ConvBlock (blue), ResBlock (cyan), DenseBlock (dark gray), Concatenation(white), and Average Pooling (red). <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220411/F1score.71l7dhskwz80.webp"alt="F1score" /></p><p>They mention the novelty score to represent the effect of thealgorithm. <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220411/novelty_score.8rhten8x95g.webp"alt="novelty_score" /></p><h3 id="local-optimization">Local Optimization</h3><p>The whole algorithm base on the F1 score and novelty score to selectthe individuals which are determined to be located near or at localoptima.</p><p>Thus every architecture has an evalution metric and a bovelty metric,the sampling of local optima can be treated as a multi-objectiveoptimization problem. Then they use the <ahref="https://zhuanlan.zhihu.com/p/430976806">NSGA-2</a> algorithm toreduce the time-complexity or/ and improved the convergence to the truePareto Optimal front.</p><p>Then the solution found by NSGA-2 will be fed into a local searchoptimizer. They chose <ahref="https://blog.csdn.net/qq_44186838/article/details/109270349">Simulatedannealing</a>(which can help to skip some local optima) as the localoptimization algorithm.</p><h3 id="experimental-setting">Experimental Setting</h3><p>They split MNIST data-set into a training set of 50000 images andheld-out validation set of 10000 images. Image pixel values arenormalized by dividing each value by 255.</p><h2 id="result">Result</h2><p><imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220411/each-population-result.3777z8no7uo0.webp"alt="each-population-result" /> 1. Population1: the population obtainedusing the standard evolutionary algorithm 2. Population 2: thepopulation obtained using the evolutionary alogrithm with Novelty searchinitialization. 3. Population 3: the population obtained from thestandard evolutionary algorithm and subsequent local optimization viaSimulated Annealing. 4. Population 4: the population obtained from theevolutionary algorithm with Novelty Search initialization and subsequentlocal optimization via Simulated Annealing.</p><h2 id="conclusions">Conclusions</h2><p>Scholars investigated the use of a three-stage CGP-based hybridevolutionary algorithm(EA) for the training of CNNs. They demostrat howthe final stage of the proposed methodology (<strong>simulatedannealing</strong>) is able to optimize the potential locally optimalindividuals found in previous stages, and do so more efficiently than anor-hybridized EA. And use the <strong>novelty</strong> as an objectivehas the effect of <strong>reducing the variance of recognition errors byan order of magnitude</strong> compared to the pure evolutionaryapproach.</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> 论文阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HJ16购物单</title>
      <link href="/2022/04/07/HJ16%E8%B4%AD%E7%89%A9%E5%8D%95/"/>
      <url>/2022/04/07/HJ16%E8%B4%AD%E7%89%A9%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>王强决定把年终奖用于购物，他把想买的物品分为两类：主件与附件，附件是从属于某个主件的，下表就是一些主件与附件的例子：</p><table><thead><tr class="header"><th>主件</th><th>附件</th></tr></thead><tbody><tr class="odd"><td>电脑</td><td>打印机，扫描仪</td></tr><tr class="even"><td>书柜</td><td>图书</td></tr><tr class="odd"><td>书桌</td><td>台灯，文具</td></tr><tr class="even"><td>工作椅</td><td>无</td></tr></tbody></table><p>如果要买归类为附件的物品，必须先买该附件所属的主件，且每件物品只能购买一次。每个主件可以有 0 个、 1 个或 2 个附件。附件不再有从属于自己的附件。王强查到了每件物品的价格（都是 10 元的整数倍），而他只有 N元的预算。除此之外，他给每件物品规定了一个重要度，用整数 1 ~ 5表示。他希望在花费不超过 N 元的前提下，使自己的满意度达到最大。满意度是指所购买的每件物品的价格与重要度的乘积的总和. ## 输入描述：输入的第 1 行，为两个正整数N，m，用一个空格隔开：</p><p>（其中 N （ N&lt;32000 ）表示总钱数， m （m &lt;60）为可购买的物品的个数。）</p><p>从第 2 行到第 m+1 行，第 j 行给出了编号为 j-1的物品的基本数据，每行有 3 个非负整数 v p q</p><p>（其中 v 表示该物品的价格（ v&lt;10000 ）， p 表示该物品的重要度（ 1~ 5 ）， q 表示该物品是主件还是附件。如果 q=0 ，表示该物品为主件，如果q&gt;0 ，表示该物品为附件， q 是所属主件的编号）</p>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> Python </tag>
            
            <tag> algorithm </tag>
            
            <tag> 中等 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归并排序</title>
      <link href="/2022/04/07/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/04/07/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="概念">概念</h2><ol type="1"><li><p>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</p></li><li><p>设定两个指针，最初位置分别为两个已经排序序列的起始位置</p></li><li><p>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</p></li><li><p>重复步骤3直到某一指针达到序列尾</p></li><li><p>将另一序列剩下的所有元素直接复制到合并序列尾</p></li></ol><figure><imgsrc="https://www.runoob.com/wp-content/uploads/2019/03/mergeSort.gif"alt="算法实现过程" /><figcaption aria-hidden="true">算法实现过程</figcaption></figure><h2 id="python-实现">python 实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">arr, l, m, r</span>):</span> </span><br><span class="line">    n1 = m - l + <span class="number">1</span></span><br><span class="line">    n2 = r- m </span><br><span class="line">    <span class="comment"># 创建临时数组</span></span><br><span class="line">    L = [<span class="number">0</span>] * (n1)</span><br><span class="line">    R = [<span class="number">0</span>] * (n2) </span><br><span class="line">    <span class="comment"># 拷贝数据到临时数组 arrays L[] 和 R[] </span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span> , n1): </span><br><span class="line">        L[i] = arr[l + i] </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span> , n2): </span><br><span class="line">        R[j] = arr[m + <span class="number">1</span> + j] </span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 归并临时数组到 arr[l..r] </span></span><br><span class="line">    i = <span class="number">0</span>     <span class="comment"># 初始化第一个子数组的索引</span></span><br><span class="line">    j = <span class="number">0</span>     <span class="comment"># 初始化第二个子数组的索引</span></span><br><span class="line">    k = l     <span class="comment"># 初始归并子数组的索引</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span> i &lt; n1 <span class="keyword">and</span> j &lt; n2 : </span><br><span class="line">        <span class="keyword">if</span> L[i] &lt;= R[j]: </span><br><span class="line">            arr[k] = L[i] </span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            arr[k] = R[j] </span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 拷贝 L[] 的保留元素</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n1: </span><br><span class="line">        arr[k] = L[i] </span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 拷贝 R[] 的保留元素</span></span><br><span class="line">    <span class="keyword">while</span> j &lt; n2: </span><br><span class="line">        arr[k] = R[j] </span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeSort</span>(<span class="params">arr,l,r</span>):</span> </span><br><span class="line">    <span class="keyword">if</span> l &lt; r: </span><br><span class="line">  </span><br><span class="line">        </span><br><span class="line">        m = <span class="built_in">int</span>((l+(r-<span class="number">1</span>))/<span class="number">2</span>)</span><br><span class="line">  </span><br><span class="line">       </span><br><span class="line">        mergeSort(arr, l, m) </span><br><span class="line">        mergeSort(arr, m+<span class="number">1</span>, r) </span><br><span class="line">        merge(arr, l, m, r) </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">arr = [<span class="number">12</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>] </span><br><span class="line">n = <span class="built_in">len</span>(arr) </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;给定的数组&quot;</span>) </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n): </span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;%d&quot;</span> %arr[i]), </span><br><span class="line">  </span><br><span class="line">mergeSort(arr,<span class="number">0</span>,n-<span class="number">1</span>) </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;\n\n排序后的数组&quot;</span>) </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n): </span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;%d&quot;</span> %arr[i]),</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> Python </tag>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django(2)</title>
      <link href="/2022/03/31/django-2/"/>
      <url>/2022/03/31/django-2/</url>
      
        <content type="html"><![CDATA[<p>这两天学习了django利用ORM对数据库的操作，个人觉得不是很符合对于数据库操作的逻辑，有些繁琐，先占个位，后续用pymysql库来补全这部分内容</p>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> Python </tag>
            
            <tag> DJango </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django(1)</title>
      <link href="/2022/03/29/Django-first/"/>
      <url>/2022/03/29/Django-first/</url>
      
        <content type="html"><![CDATA[<h2 id="过滤器">过滤器</h2><p>在HTML中按照如下格式写入则可实现前端对后端传来的数据进行简单处理的功能。<code>&#123;&#123; 变量名 | 过滤器：可选参数 &#125;&#125;</code> + 过滤的数据可以进行套接如<code>&#123;&#123; my_list|first|upper &#125;&#125;</code>先提取第一个，然后再转为大写 ###最大化最小化<code>&#123;&#123; name|lower &#125;&#125;</code>或者<code>&#123;&#123;name|upper&#125;&#125;</code>### 提取前几个词 <code>&#123;&#123;name|truncatewords:"10"&#125;&#125;</code>提取变量name的前10个词参数要用双引号括起来 ### 添加反斜杠<code>&#123;&#123;name|addslashes&#125;&#125;</code>添加反斜杠<code>\</code></p><h3id="如果获取的值是控制或者false则显示默认值">如果获取的值是控制或者false则显示默认值</h3><p><code>&#123;&#123; name|default:"这个是默认值" &#125;&#125;</code> 如果前端接收到后端的数据为<code>0  0.0  False  0j  ""  []  ()  set()  &#123;&#125;  None</code>这些则显示default里面的值</p><h3 id="返回数值的长度">返回数值的长度</h3><p><code>&#123;&#123; name|length&#125;&#125;</code></p><h3id="将数值转为容易读取的文件大小格式">将数值转为容易读取的文件大小格式</h3><p><code>&#123;&#123; num|filesizeformat&#125;&#125;</code>如1024 则显示1.0kb</p><h3 id="将时间数据格式化">将时间数据格式化</h3><p><code>&#123;&#123; time|date:"Y-m-d" &#125;&#125;</code>传到前端的时间数据将显示为年月日格式</p><h3 id="将多余的字符数据用省略号代替">将多余的字符数据用省略号代替</h3><p><code>&#123;&#123; views_str|truncatechars:2&#125;&#125;</code>只显示views_str中的两个字符，其余的用<code>...</code>代替</p><h3id="告诉前端穿过来的链接是安全的不用进行转义">告诉前端穿过来的链接是安全的不用进行转义</h3><p><code>&#123;&#123; views_str|safe &#125;&#125;</code>例如传过来的是一个带有url的html片段，就可以直接点击</p><h2 id="ifelse-标签对传到前端的数据进行判断">if/else标签，对传到前端的数据进行判断</h2><p>基本格式为 <figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> condition %&#125;</span></span><br><span class="line"><span class="xml">     ... display</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure> 或者 <figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> condition1 %&#125;</span></span><br><span class="line"><span class="xml">   ... display 1</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">elif</span></span> condition2 %&#125;</span></span><br><span class="line"><span class="xml">   ... display 2</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">else</span></span> %&#125;</span></span><br><span class="line"><span class="xml">   ... display 3</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure> 如 <figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;%<span class="name"><span class="name">if</span></span> num &gt;90 and num &lt;=100 %&#125;</span></span><br><span class="line"><span class="xml">优秀</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">elif</span></span> num &gt;60 and num &lt;=90 %&#125;</span></span><br><span class="line"><span class="xml">合格</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">else</span></span> %&#125;</span></span><br><span class="line"><span class="xml">不及格</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>这样当后端传来分数时可以自动判断显示哪一段数据</p><h2 id="for-标签">for 标签</h2><p>作用就是循环遍历，系统会渲染<code>&#123;% for %&#125;` 和 `&#123;% endfor %&#125;</code>之间的内容例如 <figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">content为range(20)</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> i <span class="keyword">in</span> content %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123; i &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br></pre></td></tr></table></figure> 显示 <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220329/image.5pe654t68eg0.webp"alt="image" /></p><p>for后面加上 reversed 则反向迭代 <figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">content为range(20)</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> i <span class="keyword">in</span> content reversed%&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123; i &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br></pre></td></tr></table></figure> ### 特殊的<figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> i <span class="keyword">in</span> content %&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; forloop.counter &#125;&#125;</span><span class="xml">  #顺序获取循环序号，从 1 开始计算</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; forloop.counter0 &#125;&#125;</span><span class="xml"> #顺序获取循环序号，从 0 开始计算</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; forloop.revcounter &#125;&#125;</span><span class="xml"> #倒序获取循环序号，结尾序号为 1</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; forloop.revcounter0 &#125;&#125;</span><span class="xml"> #倒序获取循环序号，结尾序号为 0</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; forloop.first &#125;&#125;</span><span class="xml"> 第一条数据返回 True，其他数据返回 False</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; forloop.last &#125;&#125;</span><span class="xml"> #最后一条数据返回 True，其他数据返回 False</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br></pre></td></tr></table></figure> 分别显示 <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220329/image.3kvxoesnn9s0.webp"alt="image" /></p><p><code>&#123;% empty %&#125;</code>如果循环为空则显示给标签下的内容<figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> i <span class="keyword">in</span> listvar %&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; forloop.counter0 &#125;&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">empty</span></span> %&#125;</span></span><br><span class="line"><span class="xml">    空空如也～</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br></pre></td></tr></table></figure> ## ifequal/ifnotequal 标签 <strong>作用：</strong><code>&#123;% ifequal %&#125;` 标签比较两个值，当他们相等时，显示在 `&#123;% ifequal %&#125;` 和` &#123;% endifequal %&#125;</code> 之中所有的值。 <figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">ifequal</span></span> section &#x27;sitenews&#x27; %&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Site News<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">else</span></span> %&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>No News Here<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endifequal</span></span> %&#125;</span></span><br></pre></td></tr></table></figure> ##csrf_token (暂时还不清楚要怎么用先记录下来) csrf_token用于form表单中，作用是跨站请求伪造保护。</p><p>如果不用<code>｛% csrf_token %｝</code>标签，在用 form表单时，要再次跳转页面会报403权限错误。</p><p>用了<code>｛% csrf_token %｝</code>标签，在 form表单提交数据时，才会成功。</p><h2 id="自定义标签和过滤器">自定义标签和过滤器</h2><ol type="1"><li>在应用目录下创建 templatetags 目录(与 templates目录同级，目录名只能是 templatetags)。</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HelloWorld/</span><br><span class="line">|-- HelloWorld</span><br><span class="line">|   |-- __init__.py</span><br><span class="line">|   |-- __init__.pyc</span><br><span class="line">|   |-- settings.py</span><br><span class="line">...</span><br><span class="line">|-- manage.py</span><br><span class="line">`-- templatetags</span><br><span class="line">`-- templates</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>在 templatetags 目录下创建任意 py 文件，如：test_tags.py</li><li>test_tags.py 文件代码如下： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line">register = template.Library()   <span class="comment">#register的名字是固定的,不可改变</span></span><br></pre></td></tr></table></figure></li><li>修改 settings.py 文件的 TEMPLATES 选项配置，添加 libraries 配置：<imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220329/image.cprwwhy4qw0.webp"alt="image" /></li><li>利用装饰器 <span class="citation"data-cites="register.filter">@register.filter</span> 在test_tags.py文件中自定义过滤器。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@register.filter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span>(<span class="params">v1, v2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> v1 * v2</span><br></pre></td></tr></table></figure></li><li>利用装饰器 <span class="citation"data-cites="register.simple_tag">@register.simple_tag</span>自定义标签。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_tag</span>(<span class="params">v1, v2, v3</span>):</span></span><br><span class="line">    <span class="keyword">return</span> v1 * v2 * v3</span><br></pre></td></tr></table></figure></li><li>在使用自定义标签和过滤器前，要在 html 文件 body 的最上方中导入该 tag文件,名字为 <code>libraries</code>中申明的变量名，不是文件的名字。<figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">load</span></span> my_tags %&#125;</span></span><br></pre></td></tr></table></figure></li><li>然后在HTML中使用自定义的过滤器<code>&#123;&#123;100|multiply:3&#125;&#125;</code>则显示300</li><li>在HTML中使用自定义的标签<code>&#123;% test_tags 11 11 11 %&#125;</code>则显示33</li><li>语义化标签 首先在tag的文件中导入<code>from django.utils.safestring import mark_safe</code></li></ol><p>定义标签时，用上 mark_safe 方法，令标签语义化。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_html</span>(<span class="params">v1, v2</span>):</span></span><br><span class="line">    temp_html = <span class="string">&quot;&lt;input type=&#x27;text&#x27; id=&#x27;%s&#x27; class=&#x27;%s&#x27; /&gt;&quot;</span> %(v1, v2)</span><br><span class="line">    <span class="keyword">return</span> mark_safe(temp_html)</span><br></pre></td></tr></table></figure>然后在HTML中使用这个标签<code>&#123;% my_html "idid" "class_class" %&#125;</code>得到 <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220329/image.u5ababmwcz4.webp"alt="image" /></p><h2 id="配置静态文件">配置静态文件</h2><ol type="1"><li>在项目根目录下创建 statics 目录。 <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">HelloWorld/</span><br><span class="line">|-- HelloWorld</span><br><span class="line">|   |-- __init__.py</span><br><span class="line">|   |-- __init__.pyc</span><br><span class="line">|   |-- settings.py</span><br><span class="line">...</span><br><span class="line">|-- manage.py</span><br><span class="line">`-- templatetags</span><br><span class="line">`-- templates</span><br><span class="line">|-- statics</span><br><span class="line">    |--js</span><br><span class="line">    |--css</span><br><span class="line">    |--images</span><br><span class="line">    |--plugins</span><br></pre></td></tr></table></figure></li><li>在 settings 文件的最下方配置添加以下配置： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL &#x3D; &#39;&#x2F;static&#x2F;&#39; # 别名 </span><br><span class="line">STATICFILES_DIRS &#x3D; [ </span><br><span class="line">    os.path.join(BASE_DIR, &quot;statics&quot;), </span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li>在 statics 目录下创建 css 目录，js 目录，images 目录，plugins 目录，分别放 css文件，js文件，图片，插件。</li><li>把 bootstrap(一个前端的模板) 框架放入插件目录 plugins。</li><li>在 HTML 文件的 head 标签中引入 bootstrap。<strong>此时引用路径中的要用配置文件中的别名 static，而不是目录statics。</strong><code>&lt;link rel="stylesheet" href="/static/plugins/bootstrap-3.3.7/dist/css/bootstrap.css"&gt;</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> Python </tag>
            
            <tag> DJango </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今天开始学习DJango</title>
      <link href="/2022/03/29/djangoStar/"/>
      <url>/2022/03/29/djangoStar/</url>
      
        <content type="html"><![CDATA[<p>准备跟着<ahref="https://www.runoob.com/django/django-first-app.html">菜鸟教程</a>走一遍DJango的使用方法记录一下，希望，希望下周就能很好的掌握了！</p><p>记录一下常用的一些命令 <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject &#x27;项目的名字&#x27;</span><br><span class="line"></span><br><span class="line">python manage.py runserver <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">8000</span>   #启动django的服务</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>百度地图api爬虫</title>
      <link href="/2022/03/26/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEapi%E7%88%AC%E8%99%AB/"/>
      <url>/2022/03/26/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEapi%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<p>两年前的一个老项目了，当时有挺多人想要我帮忙爬取百度地图上的坐标等数据，决定利用百度地图的api结合tkinter写一个有GUI界面的小软件方便同学的使用。</p><h2 id="爬虫部分">爬虫部分</h2><p>很简单，参考百度地图api的<ahref="https://lbsyun.baidu.com/index.php?title=webapi">公开文档</a>利用requests库专递参数就能返回想要的数据了<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">self</span>):</span></span><br><span class="line">    root_dir = self.<span class="built_in">input</span>.get()  <span class="comment">#获取需要保存文件的位置</span></span><br><span class="line">    query=self.carear.get()       <span class="comment">#选取的地理范围</span></span><br><span class="line">    <span class="comment">#region=self.addre.get()</span></span><br><span class="line">    shen=self.shen.get()          <span class="comment">#省</span></span><br><span class="line">    shi=self.shi.get()              <span class="comment">#市</span></span><br><span class="line">    qu=self.qu.get()                <span class="comment">#区</span></span><br><span class="line">    ···</span><br></pre></td></tr></table></figure>在调用api的过程中发现如果不限定最小的采集范围，比如某一市的某一行政区，那么api只会返回很小的一部分数据，当需要爬取一个市的数据时，如果要每次都选择一个区来爬取不免有些繁琐，因此加上一个选项为all选上这个则程序将自动按分行政区进行爬取最后整合在一起，减少人工的操作。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> qu==<span class="string">&#x27;all&#x27;</span>:                   <span class="comment">#选择 all的时候爬取分别爬取 每个区的数据</span></span><br><span class="line">    region=self.qu[<span class="string">&#x27;value&#x27;</span>][<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    region=[qu]</span><br><span class="line"><span class="comment">#ak=self.ak.get()</span></span><br><span class="line">f=root_dir+<span class="string">&#x27;\\&#x27;</span> +shen+shi+qu+query+<span class="string">&#x27;.csv&#x27;</span></span><br><span class="line">out=<span class="built_in">open</span>(f,<span class="string">&#x27;a&#x27;</span>,newline=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">csv_write=csv.writer(out,dialect=<span class="string">&#x27;excel&#x27;</span>)    <span class="comment">#将爬取到的数据存储在csv中    </span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> region:</span><br><span class="line">    urls=[]</span><br><span class="line">    addr=shen+shi+j</span><br><span class="line">    ak = <span class="string">&#x27;########&#x27;</span>  <span class="comment">#换自己申请的ak</span></span><br><span class="line">    url1=<span class="string">&#x27;http://api.map.baidu.com/place/v2/search?query=&#x27;</span>+query+<span class="string">&#x27;&amp;region=&#x27;</span>+addr+<span class="string">&#x27;&amp;coord_type=1&amp;page_size=20&amp;page_num=0&amp;output=json&amp;ak=&#x27;</span>+ak   <span class="comment">#百度地图的api</span></span><br><span class="line">    todata=requests.get(url1)</span><br><span class="line">    todata=todata.json()   <span class="comment">#将返回的数据进行json格式化 后序则可以像字典一样提取返回的数据</span></span><br><span class="line">    total=todata[<span class="string">&#x27;total&#x27;</span>]</span><br><span class="line">    self.info.insert(<span class="string">&#x27;end&#x27;</span>,<span class="string">&#x27;正在爬取&#x27;</span>+addr+<span class="string">&#x27;\n&#x27;</span>)  </span><br><span class="line">    self.info.insert(<span class="string">&#x27;end&#x27;</span>,<span class="string">&#x27;总计&#x27;</span>+<span class="built_in">str</span>(total)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    self.info.update()       <span class="comment">#刷新软件的文本显示框</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,(<span class="built_in">int</span>(total)%<span class="number">20</span>)+<span class="number">1</span>):</span><br><span class="line">        page_num=<span class="built_in">str</span>(i)</span><br><span class="line">        url=<span class="string">&#x27;http://api.map.baidu.com/place/v2/search?query=&#x27;</span>+query+<span class="string">&#x27;&amp;region=&#x27;</span>+addr+<span class="string">&#x27;&amp;coord_type=1&amp;page_size=20&amp;page_num=&#x27;</span>+<span class="built_in">str</span>(page_num)+<span class="string">&#x27;&amp;output=json&amp;ak=&#x27;</span>+ak</span><br><span class="line">        urls.append(url)</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        html=requests.get(url)<span class="comment">#获取网页信息</span></span><br><span class="line">        data=html.json()<span class="comment">#获取网页信息的json格式数据</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> data[<span class="string">&#x27;results&#x27;</span>]:</span><br><span class="line">            jname1 = item[<span class="string">&#x27;province&#x27;</span>] <span class="comment">#返回数据中的省</span></span><br><span class="line">            jname2 = item[<span class="string">&#x27;city&#x27;</span>] <span class="comment">#返回数据中的城市</span></span><br><span class="line">            jname3 = item[<span class="string">&#x27;area&#x27;</span>] <span class="comment">#返回数据中的行政区</span></span><br><span class="line">            jname4 = item[<span class="string">&#x27;name&#x27;</span>] <span class="comment">#返回数据中的地点名字</span></span><br><span class="line">            jname=jname2+jname3+jname4</span><br><span class="line">            <span class="comment">#j_uid=item[&#x27;uid&#x27;]</span></span><br><span class="line">            <span class="comment">#jstreet_id=item.get(&#x27;street_id&#x27;)</span></span><br><span class="line">            jlat=item[<span class="string">&#x27;location&#x27;</span>][<span class="string">&#x27;lat&#x27;</span>]  <span class="comment">#获取地点的经纬度数据</span></span><br><span class="line">            jlon=item[<span class="string">&#x27;location&#x27;</span>][<span class="string">&#x27;lng&#x27;</span>]</span><br><span class="line">            jaddress=item[<span class="string">&#x27;address&#x27;</span>]     <span class="comment">#获取地点的地址</span></span><br><span class="line">            jphone=item.get(<span class="string">&#x27;telephone&#x27;</span>)    <span class="comment">#获取地点的电话信息</span></span><br><span class="line">            j_str=(jname1,jname2,jname3,jname4,<span class="built_in">str</span>(jlat),<span class="built_in">str</span>(jlon),jaddress,jphone)</span><br><span class="line">            self.info.insert(<span class="string">&#x27;end&#x27;</span>,<span class="built_in">str</span>(j_str)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="comment">#time.sleep(0.1)</span></span><br><span class="line">            self.info.update()</span><br><span class="line">            <span class="comment">#print(j_str)</span></span><br><span class="line">            csv_write.writerow(j_str)   <span class="comment">#将数据逐条写入文件中</span></span><br><span class="line">            self.info.see(END)</span><br></pre></td></tr></table></figure> ## GUI可视化部分 使用到的是python自带的tkinter库<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> ttk</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.filedialog <span class="keyword">import</span> askdirectory</span><br></pre></td></tr></table></figure> 首先定义整个软件所需要的各种选择框或输入框显示框<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">    self.window = tk.Tk()  <span class="comment">#创建window窗口</span></span><br><span class="line">    self.window.title(<span class="string">&quot;百度地图&quot;</span>)  <span class="comment"># 定义窗口名称</span></span><br><span class="line">    self.window.resizable(<span class="number">0</span>,<span class="number">0</span>)  <span class="comment"># 禁止调整窗口大小</span></span><br><span class="line">    self.shen = ttk.Combobox(self.window,width=<span class="number">10</span>)  <span class="comment">#选择框</span></span><br><span class="line">    self.shi = ttk.Combobox(self.window,width=<span class="number">10</span>)</span><br><span class="line">    self.qu = ttk.Combobox(self.window,width=<span class="number">10</span>)</span><br><span class="line">    self.path = StringVar()      <span class="comment">#选择保存路径的按钮</span></span><br><span class="line">    self.lab1 = tk.Label(self.window, text = <span class="string">&quot;目标路径:&quot;</span>)</span><br><span class="line">    self.lab2 = tk.Label(self.window, text=<span class="string">&quot;爬取的行业:&quot;</span>)</span><br><span class="line">    self.lab3 = tk.Label(self.window, text=<span class="string">&quot;省/直辖市&quot;</span>)</span><br><span class="line">    self.lab5=tk.Label(self.window,text=<span class="string">&quot;市&quot;</span>)</span><br><span class="line">    self.lab6=tk.Label(self.window,text=<span class="string">&quot;区&quot;</span>)</span><br><span class="line">    self.lab4=tk.Label(self.window,text=<span class="string">&quot;密码:&quot;</span>)</span><br><span class="line">    self.ak=tk.Entry(self.window,width=<span class="number">20</span>)   <span class="comment">#提供输入ak的输入框</span></span><br><span class="line">    self.carear= tk.Entry(self.window, width=<span class="number">20</span>)  <span class="comment">#爬取关键词的输入框</span></span><br><span class="line">    self.<span class="built_in">input</span> = tk.Entry(self.window, textvariable = self.path, width=<span class="number">80</span>) </span><br><span class="line">    self.info = tk.Text(self.window, height=<span class="number">20</span>,width=<span class="number">100</span>)   <span class="comment"># 创建一个文本展示框，并设置尺寸</span></span><br><span class="line">    self.shen[<span class="string">&#x27;value&#x27;</span>]=[<span class="string">&#x27;北京市&#x27;</span>, <span class="string">&#x27;天津市&#x27;</span>, <span class="string">&#x27;河北省&#x27;</span>, <span class="string">&#x27;山西省&#x27;</span>, <span class="string">&#x27;内蒙古&#x27;</span>, <span class="string">&#x27;辽宁省&#x27;</span>, <span class="string">&#x27;吉林省&#x27;</span>, <span class="string">&#x27;黑龙江省&#x27;</span>, <span class="string">&#x27;上海市&#x27;</span>, <span class="string">&#x27;江苏省&#x27;</span>, <span class="string">&#x27;浙江省&#x27;</span>, <span class="string">&#x27;安徽省&#x27;</span>, <span class="string">&#x27;福建省&#x27;</span>, <span class="string">&#x27;江西省&#x27;</span>, <span class="string">&#x27;山东省&#x27;</span>, <span class="string">&#x27;河南省&#x27;</span>, <span class="string">&#x27;湖北省&#x27;</span>, <span class="string">&#x27;湖南省&#x27;</span>, <span class="string">&#x27;广东省&#x27;</span>, <span class="string">&#x27;广西&#x27;</span>, <span class="string">&#x27;海南省&#x27;</span>, <span class="string">&#x27;重庆市&#x27;</span>, <span class="string">&#x27;四川省&#x27;</span>, <span class="string">&#x27;贵州省&#x27;</span>, <span class="string">&#x27;云南省&#x27;</span>, <span class="string">&#x27;西藏&#x27;</span>, <span class="string">&#x27;陕西省&#x27;</span>, <span class="string">&#x27;甘肃省&#x27;</span>, <span class="string">&#x27;青海省&#x27;</span>, <span class="string">&#x27;宁夏&#x27;</span>, <span class="string">&#x27;新疆&#x27;</span>, <span class="string">&#x27;台湾省&#x27;</span>, <span class="string">&#x27;澳门&#x27;</span>, <span class="string">&#x27;香港&#x27;</span>]</span><br><span class="line">    <span class="comment"># 添加一个按钮，用于选择保存路径</span></span><br><span class="line">    self.t_button = tk.Button(self.window, text=<span class="string">&#x27;选择路径&#x27;</span>, relief=tk.RAISED, width=<span class="number">8</span>, height=<span class="number">1</span>, command=self.select_Path)</span><br><span class="line">    <span class="comment"># 添加一个按钮，用于触发爬取功能</span></span><br><span class="line">    self.t_button1 = tk.Button(self.window, text=<span class="string">&#x27;爬取&#x27;</span>, relief=tk.RAISED, width=<span class="number">8</span>, height=<span class="number">1</span>,command=<span class="keyword">lambda</span>:self.thread_it(self.download))</span><br><span class="line">    <span class="comment"># 添加一个按钮，用于触发清空输出框功能</span></span><br><span class="line">    self.c_button2 = tk.Button(self.window, text=<span class="string">&#x27;清空输出&#x27;</span>, relief=tk.RAISED,width=<span class="number">8</span>, height=<span class="number">1</span>, command=self.cle)</span><br><span class="line">    self.stop1=tk.Button(self.window,text=<span class="string">&#x27;停止爬取&#x27;</span>, relief=tk.RAISED,width=<span class="number">8</span>, height=<span class="number">1</span>, command=self.stop)</span><br></pre></td></tr></table></figure> 接下来设计排布每个控件的位置 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gui_arrang</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;完成页面元素布局，设置各部件的位置&quot;&quot;&quot;</span></span><br><span class="line">    self.lab1.grid(row=<span class="number">0</span>,column=<span class="number">0</span>,sticky=E)</span><br><span class="line">    self.lab2.grid(row=<span class="number">1</span>, column=<span class="number">0</span>,sticky=E)</span><br><span class="line">    self.lab3.grid(row=<span class="number">2</span>, column=<span class="number">0</span>,sticky=E,columnspan=<span class="number">1</span>)</span><br><span class="line">    self.lab4.grid(row=<span class="number">3</span>,column=<span class="number">0</span>,sticky=E)</span><br><span class="line">    self.lab5.grid(row=<span class="number">2</span>,column=<span class="number">2</span>,sticky=W)</span><br><span class="line">    self.lab6.grid(row=<span class="number">2</span>,column=<span class="number">4</span>,sticky=W)</span><br><span class="line">    self.ak.grid(row=<span class="number">3</span>,column=<span class="number">1</span>,columnspan=<span class="number">2</span>,sticky=W)</span><br><span class="line">    self.carear.grid(row=<span class="number">1</span>,column=<span class="number">1</span>,columnspan=<span class="number">2</span>,sticky=W)</span><br><span class="line">    self.shen.grid(row=<span class="number">2</span>, column=<span class="number">1</span>,sticky=W)</span><br><span class="line">    self.shi.grid(row=<span class="number">2</span>, column=<span class="number">3</span>,sticky=W)</span><br><span class="line">    self.qu.grid(row=<span class="number">2</span>, column=<span class="number">5</span>,sticky=W)</span><br><span class="line">    self.<span class="built_in">input</span>.grid(row=<span class="number">0</span>,column=<span class="number">1</span>,columnspan=<span class="number">8</span>,sticky=W)</span><br><span class="line">    self.info.grid(row=<span class="number">4</span>,rowspan=<span class="number">5</span>,column=<span class="number">0</span>,columnspan=<span class="number">10</span>,padx=<span class="number">15</span>,pady=<span class="number">15</span>,sticky=W)</span><br><span class="line">    self.t_button.grid(row=<span class="number">0</span>,column=<span class="number">11</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>,sticky=tk.W)</span><br><span class="line">    self.t_button1.grid(row=<span class="number">1</span>,column=<span class="number">12</span>)</span><br><span class="line">    self.c_button2.grid(row=<span class="number">0</span>,column=<span class="number">12</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>,sticky=tk.W)</span><br><span class="line">    self.stop1.grid(row=<span class="number">3</span>,column=<span class="number">12</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>,sticky=tk.W)</span><br><span class="line">    self.shen.bind(<span class="string">&#x27;&lt;&lt;ComboboxSelected&gt;&gt;&#x27;</span>,self.changeshi)</span><br><span class="line">    self.shi.bind(<span class="string">&#x27;&lt;&lt;ComboboxSelected&gt;&gt;&#x27;</span>,self.changequ)</span><br></pre></td></tr></table></figure>最后呈现的效果如图 <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220326/软件界面.2v5agtinm7m0.webp"alt="软件界面" /> 运行的过程 <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220326/运行过程.3iavxklrmdq0.webp"alt="运行过程" /> 然后就能在目标路径下生产存储数据的文件了 <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220326/结果.7aisdm17x2s0.webp"alt="结果" /> 完整项目可以到<ahref="https://github.com/waterkingest/baidumapspider">github仓库</a>进行查看</p>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> tkinter </tag>
            
            <tag> gui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Water_Extracting</title>
      <link href="/2022/03/26/water-extract/"/>
      <url>/2022/03/26/water-extract/</url>
      
        <content type="html"><![CDATA[<p>In this project, I design a neural network structure to achieve thetarget of extracting water body from the remote sensing images. Andfinally it achive a better result than other previously methods.</p><h2 id="target">Target</h2><p>In urban features, water bodies influence the functioning of urbanecosystems in various ways, with their role in, for example, tourism,flood control and urban heat island regulation constantly influencinghuman life and urban economic development. There for a objective andaccurate understanding of the spatial and temporal distributioncharacteristics of urban water resources is essential for urban planningand development. To achieve this target, designing an effective andreliable method to help human to extract this data from remote sensingimages more quicklly is useful and necessary. In this situation,designing an artificial inteligent method to achieve this goal base ondeep learning is suitable.</p><hr /><h2 id="method">Method</h2><h3 id="data-processing">Data processing</h3><p>First of all, we need to get the data that is used to train the deeplearining algorithms. I choose download the remote sensing images ofChengdu, China from the Google Earth Engine. I have acquired almost 40images of 4000*4000. Then I use the ArcMap to make the lable of eachimage, to creat the data of training.<br /><imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/image.3kagxm78k0e0.webp"alt="image" /><br /><imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/image.5sgq2nnhxdg.webp"alt="label" /></p><p>To enhance the robustness and generalisation of the network, it isoften necessary to augment the training data. In this project, theexisting dataset was randomly transformed by mirroring, verticaltransformation, cropping, random selection, fuzzy processing and noiseaddition operations, eventually expanding the dataset to 10000 images of512*512. <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span><span class="title">gamma_transform</span>(<span class="params">img, gamma</span>):</span></span><br><span class="line">    gamma_table = [np.power(x / <span class="number">255.0</span>, gamma) * <span class="number">255.0</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">    gamma_table = np.<span class="built_in">round</span>(np.array(gamma_table)).astype(np.uint8)</span><br><span class="line">    <span class="keyword">return</span> cv2.LUT(img, gamma_table)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_gamma_transform</span>(<span class="params">img, gamma_vari</span>):</span></span><br><span class="line">    log_gamma_vari = np.log(gamma_vari)</span><br><span class="line">    alpha = np.random.uniform(-log_gamma_vari, log_gamma_vari)</span><br><span class="line">    gamma = np.exp(alpha)</span><br><span class="line">    <span class="keyword">return</span> gamma_transform(img, gamma)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotate</span>(<span class="params">xb,yb,angle,img_w,img_h</span>):</span></span><br><span class="line">    M_rotate = cv2.getRotationMatrix2D((img_w/<span class="number">2</span>, img_h/<span class="number">2</span>), angle, <span class="number">1</span>)</span><br><span class="line">    xb = cv2.warpAffine(xb, M_rotate, (img_w, img_h))</span><br><span class="line">    yb = cv2.warpAffine(yb, M_rotate, (img_w, img_h))</span><br><span class="line">    <span class="keyword">return</span> xb,yb</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blur</span>(<span class="params">img</span>):</span><span class="comment">#加模糊</span></span><br><span class="line">    img = cv2.blur(img, (<span class="number">3</span>, <span class="number">3</span>));</span><br><span class="line">    <span class="keyword">return</span> img</span><br></pre></td></tr></table></figure> The final result is as follows.<br /><imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/image.6cg7zzrd5400.webp"alt="image" /> <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/image.55jm84moiv80.webp"alt="label" /></p><h3 id="network-structure">Network structure</h3><p>In this projcet, I improve the traditional Unet structure, like theimage shows below. <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/UNET.3jdhghg3kew0.webp"alt="UNET" /> A deeper network structure is designed based on Unet,while Dilated convolution is used to implement feature map downsamplingand feature extraction to further improve the accuracy andgeneralisation of the network extraction. Meanwhile, I introduce theRes-block that is a good solution to the problem of network degradationthat can occur when the network structure is too deep. <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/Resunet.5kql22bye9o0.webp"alt="Resunet" /> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, num_classes=<span class="number">2</span>, in_channels=<span class="number">3</span>, pretrained=<span class="literal">False</span>,record=<span class="literal">False</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(MyUnet2, self).__init__()</span><br><span class="line">        out_filters = [<span class="number">64</span>, <span class="number">128</span>, <span class="number">256</span>, <span class="number">512</span>,<span class="number">1024</span>]</span><br><span class="line">        resnet = models.resnet34(pretrained=<span class="literal">True</span>)</span><br><span class="line">        self.record=record</span><br><span class="line">        self.encoder1 = resnet.layer1</span><br><span class="line">        self.encodecov1=nn.Sequential(</span><br><span class="line">                nn.Conv2d(out_filters[<span class="number">0</span>],out_filters[<span class="number">1</span>], kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">                nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">                nn.BatchNorm2d(out_filters[<span class="number">1</span>]),</span><br><span class="line">            )</span><br><span class="line">        self.encoder2 = resnet.layer2</span><br><span class="line">        self.encodecov2=nn.Sequential(</span><br><span class="line">                nn.Conv2d(out_filters[<span class="number">1</span>],out_filters[<span class="number">2</span>], kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">                nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">                nn.BatchNorm2d(out_filters[<span class="number">2</span>]),</span><br><span class="line">            )</span><br><span class="line">        self.encoder3 = resnet.layer3</span><br><span class="line">        self.encodecov3=nn.Sequential(</span><br><span class="line">                nn.Conv2d(out_filters[<span class="number">2</span>],out_filters[<span class="number">3</span>], kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">                nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">                nn.BatchNorm2d(out_filters[<span class="number">3</span>]),</span><br><span class="line">            )</span><br><span class="line">        self.encoder4 = resnet.layer4</span><br><span class="line">        self.encodecov4=nn.Conv2d(out_filters[<span class="number">3</span>],out_filters[<span class="number">4</span>],kernel_size=<span class="number">3</span>,padding=<span class="number">1</span>)</span><br><span class="line">        self.Down1 = unetDown(in_channels, out_filters[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        self.Down2 = unetDown(out_filters[<span class="number">0</span>], out_filters[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        self.Down3 = unetDown(out_filters[<span class="number">1</span>], out_filters[<span class="number">2</span>])</span><br><span class="line">        </span><br><span class="line">        self.Down4 = unetDown2(out_filters[<span class="number">2</span>], out_filters[<span class="number">3</span>])</span><br><span class="line">        </span><br><span class="line">        self.Down5 = unetDown3(out_filters[<span class="number">3</span>], out_filters[<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">        self.Up1=unetUp(out_filters[<span class="number">4</span>], out_filters[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">        self.Up2=unetUp(out_filters[<span class="number">3</span>], out_filters[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">        self.Up3=unetUp(out_filters[<span class="number">2</span>], out_filters[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        self.Up4=unetUp(out_filters[<span class="number">1</span>], out_filters[<span class="number">0</span>])</span><br><span class="line">        self.cov111=nn.Conv2d(out_filters[<span class="number">0</span>],<span class="number">2</span>,kernel_size=<span class="number">3</span>,padding=<span class="number">1</span>)</span><br><span class="line">        self.relu=nn.ReLU(<span class="literal">True</span>)</span><br><span class="line">        self.final = nn.Conv2d(<span class="number">2</span>, num_classes, <span class="number">1</span>)</span><br><span class="line">        self.maxp=nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>)</span><br><span class="line">        self.finalsof=nn.Softmax(dim=-<span class="number">1</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, inputs</span>):</span></span><br><span class="line">        feate1=self.Down1(inputs)</span><br><span class="line">        feate11=self.maxp(feate1)</span><br><span class="line">        e1 = self.encoder1(feate11)<span class="comment">#64,512,512</span></span><br><span class="line">        e11=self.encodecov1(e1)</span><br><span class="line">        e2 = self.encoder2(e1)<span class="comment">#128,256,256</span></span><br><span class="line">        e21=self.encodecov2(e2)</span><br><span class="line">        e3 = self.encoder3(e2)<span class="comment">#256，128，128</span></span><br><span class="line">        e31=self.encodecov3(e3)</span><br><span class="line">        e4 = self.encoder4(e3)<span class="comment">#512，64，64</span></span><br><span class="line">        feate5=self.Down5(e4)</span><br><span class="line">        Up6=self.Up1(e31,feate5)</span><br><span class="line">        Up7=self.Up2(e21,Up6)</span><br><span class="line">        Up8=self.Up3(e11,Up7)</span><br><span class="line">        Up9=self.Up4(feate1,Up8)</span><br><span class="line">        final=self.cov111(Up9)</span><br><span class="line">        final=self.relu(final)</span><br><span class="line">        final=self.final(final)</span><br><span class="line">        <span class="keyword">return</span> final</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_initialize_weights</span>(<span class="params">self, *stages</span>):</span></span><br><span class="line">        <span class="keyword">for</span> modules <span class="keyword">in</span> stages:</span><br><span class="line">            <span class="keyword">for</span> module <span class="keyword">in</span> modules.modules():</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">isinstance</span>(module, nn.Conv2d):</span><br><span class="line">                    nn.init.kaiming_normal_(module.weight)</span><br><span class="line">                    <span class="keyword">if</span> module.bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                        module.bias.data.zero_()</span><br><span class="line">                <span class="keyword">elif</span> <span class="built_in">isinstance</span>(module, nn.BatchNorm2d):</span><br><span class="line">                    module.weight.data.fill_(<span class="number">1</span>)</span><br><span class="line">                    module.bias.data.zero_()</span><br></pre></td></tr></table></figure> #### Dilated convolution It refers to theinjection of uncomputed voids into the standard convolution kernel, asshown in the figure, and in this way increases the perceptual wildnessof the network <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/空洞卷积.4f4nh152m4c0.webp"alt="Dilated convolution" /></p><h4 id="res-block">Res-Block</h4><p><imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/残差学习单元.78s2ei4w2200.webp"alt="Res-Block" /> This structure does not complicate the computationduring training and no other parameters are generated to consume memory.And it can also help to retain both low-dimensional and high-latitudefeatures of the feature map.</p><h3 id="loss-function">loss function</h3><p>In this projcet, a combined loss function combining a pixel-basedcross-entropy loss function and a Disce loss function is used as theoverall training loss function. The combination of the two lossfunctions allows the simultaneous acquisition of CE-loss capable ofpixel-based computation, while using Dice loss to balance thedisadvantage of unreliable CE-loss performance when the ratio of waterto non-water bodies in the image is out of balance.</p><h4 id="ce-loss">CE-loss</h4><p>The cross-entropy loss function is by far the most commonly used lossfunction for image semantic segmentation tasks. This method examineseach pixel point individually and compares the class predictions withthe one-hot encoded label. The equation implemented is as follows <spanclass="math display">\[\operatorname{loss}=\sum_{j} t_{i, j} \log \left(y_{i,j}\right)+\left(1-t_{i, j}\right) \log \left(1-y_{i, j}\right)\]</span></p><h4 id="dice-loss">Dice loss</h4><p>The formula is implemented as follows, in effect finding the overlapbetween the two samples <span class="math display">\[\operatorname{loss}=1-\frac{2|A \cap B|}{|A|+|B|}\]</span></p><hr /><h2 id="result">Result</h2><h3 id="accuracy-evaluation">Accuracy Evaluation</h3><p>The main accuracy evaluation methods used in this paper are F-score,kappa coefficient, and MIoU coefficient.</p><h4 id="f-score">F-score</h4><p><span class="math display">\[F-\text { score }=\frac{\left(1+\beta^{2}\right) \text { precision }\times \text { recall }}{\beta^{2} \text { precision }+\text { recall }}\]</span> <span class="math display">\[\begin{array}{r}\text { precision }=\frac{T P}{T P+F P} \\\text { recall }=\frac{T P}{T P+F N}\end{array}\]</span></p><h4 id="kappa-coefficient">Kappa coefficient</h4><p><span class="math display">\[K=\frac{N \sum_{i=1}^{r} x_{i i}-\sum_{i=1}^{r}\left(x_{i+} \timesx_{+i}\right)}{N^{2}-\sum_{i=1}^{r}\left(x_{i+} \times x_{+i}\right)}\]</span></p><h4 id="mathrmmlou-coefficient"><spanclass="math inline">\(\mathrm{MlOU}\)</span> coefficient</h4><p><span class="math display">\[\mathrm{MlOU}=\frac{1}{k+1} \sum_{i=0}^{k} \frac{p_{i i}}{\sum_{j=0}^{k}p_{i j}+\sum_{i=0}^{k} p_{j i}-p_{i i}}\]</span> Equal <span class="math display">\[\mathrm{MlOU}=\frac{1}{k+1} \sum_{i=0}^{k} \frac{T P}{F N+F P+T P}\]</span></p><h3 id="result-1">Result</h3><table><thead><tr class="header"><th>Network Structure</th><th>F-SCORE</th><th>KAPPA</th><th>MIOU</th></tr></thead><tbody><tr class="odd"><td>DEEPLABV3+</td><td>0.901</td><td>0.812</td><td>93.85%</td></tr><tr class="even"><td>UNET</td><td>0.966</td><td>0.899</td><td>96.58%</td></tr><tr class="odd"><td>DLINKNET</td><td>0.911</td><td>0.794</td><td>93.32%</td></tr><tr class="even"><td>RES-UNET</td><td>0.939</td><td>0.968</td><td>98.85%</td></tr></tbody></table><p><imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/image.6se9mi0v9po0.webp"alt="result" /> This picture shows the effect of each network structuresin extracting water bodies from remote sensing images.</p><p>Through these data we can see the ResUnet structure provided in thispaper had the highest MIoU at 98.85% and the highest Kappa index at0.968. This indicates that the ResUnet model was able to extract thevast majority of the water bodies and also had the highest accuracy.</p><h2 id="finally">Finally</h2><p><imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/image.18ita2kmqcu8.webp"alt="image" /> Use this algorithm to extract water body from the93696*62464 remote sensing image of Chengdu China. <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/image.3tbljosiyhi0.webp"alt="image" /> This took only about 10 minutes.</p><p>More detail about the codes of this project you can check from my <ahref="https://github.com/waterkingest/pytorch_form">GitHub</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> Python </tag>
            
            <tag> Pytorch </tag>
            
            <tag> AI </tag>
            
            <tag> CV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆排序</title>
      <link href="/2022/03/24/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/03/24/%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="概念">概念</h2><p>堆排序是利用 堆进行排序的 堆是一种完全二叉树 堆有两种类型: 大根堆小根堆 两种类型的概念如下： 大根堆：每个结点的值都大于或等于左右孩子结点小根堆：每个结点的值都小于或等于左右孩子结点</p><p><imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220324/大根堆.67mflfwi6ys0.webp"alt="大根堆" /> <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220324/小根堆.6tl2qycxbdo.webp"alt="小根堆" /></p><h2 id="算法过程">算法过程</h2><p>如何把一个序列构造出一个大根堆输出堆顶元素后，如何使剩下的元素构造出一个大根堆</p><figure><imgsrc="https://www.runoob.com/wp-content/uploads/2019/03/heapSort.gif"alt="算法执行过程" /><figcaption aria-hidden="true">算法执行过程</figcaption></figure><p>python实现如下 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_heap</span>(<span class="params">arr,star,end</span>):</span>  <span class="comment">#用于构建大根堆</span></span><br><span class="line">  temp=arr[star]</span><br><span class="line">  i=star</span><br><span class="line">  j=<span class="number">2</span>*i    <span class="comment">#左子节点的索引为2*i 右子节点为2*i+1</span></span><br><span class="line">  <span class="keyword">while</span> j&lt;=end:</span><br><span class="line">    <span class="keyword">if</span> j&lt;end <span class="keyword">and</span> arr[j]&lt;arr[j+<span class="number">1</span>]: <span class="comment">#比较左右子节点大小，选取大的作为用于替换的节点</span></span><br><span class="line">      j+=<span class="number">1</span> </span><br><span class="line">    <span class="keyword">if</span> temp&lt;arr[j]: <span class="comment">#判断子节点是否比父节点大，是则互换</span></span><br><span class="line">      arr[i]=arr[j]</span><br><span class="line">      i=j   <span class="comment">#互换以后将比较节点移动到子节点上</span></span><br><span class="line">      j=<span class="number">2</span>*i  <span class="comment">#在下一循环中比较子节点和子节点的子节点</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  arr[i]=temp</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">swap</span>(<span class="params">arr,i,j</span>):</span></span><br><span class="line">  arr[i],arr[j]=arr[j],arr[i]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span>(<span class="params">arr</span>):</span></span><br><span class="line">  L_length=<span class="built_in">len</span>(arr)-<span class="number">1</span></span><br><span class="line">  first_count=L_length//<span class="number">2</span> <span class="comment">#最后一个父节点的索引</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(first_count):</span><br><span class="line">    build_heap(arr,first_count-i,L_length) <span class="comment">#构建第一个大根堆</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L_length-<span class="number">1</span>):</span><br><span class="line">    swap(arr,<span class="number">1</span>,L_length-i) <span class="comment">#替换第一个节点和最后一个未排序的节点</span></span><br><span class="line">    build_heap(arr,<span class="number">1</span>,L_length-i-<span class="number">1</span>)<span class="comment">#对剔除最后一个节点的堆重新构造大根堆</span></span><br><span class="line">  <span class="keyword">return</span> [arr[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(arr))]</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> Python </tag>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序</title>
      <link href="/2022/03/23/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/03/23/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="算法步骤">算法步骤</h2><ol type="1"><li><p>从数列中挑出一个元素，称为 "基准"（pivot）;</p></li><li><p>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</p></li><li><p>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；</p></li></ol><p><imgsrc="https://www.runoob.com/wp-content/uploads/2019/03/quickSort.gif"alt="动图" /> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quickSort</span>(<span class="params">arr, left=<span class="literal">None</span>, right=<span class="literal">None</span></span>):</span></span><br><span class="line">    left = <span class="number">0</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(left,(<span class="built_in">int</span>, <span class="built_in">float</span>)) <span class="keyword">else</span> left</span><br><span class="line">    right = <span class="built_in">len</span>(arr)-<span class="number">1</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(right,(<span class="built_in">int</span>, <span class="built_in">float</span>)) <span class="keyword">else</span> right</span><br><span class="line">    <span class="keyword">if</span> left &lt; right:</span><br><span class="line">        partitionIndex = partition(arr, left, right)</span><br><span class="line">        quickSort(arr, left, partitionIndex-<span class="number">1</span>)</span><br><span class="line">        quickSort(arr, partitionIndex+<span class="number">1</span>, right)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span>(<span class="params">arr, left, right</span>):</span></span><br><span class="line">    pivot = left</span><br><span class="line">    index = pivot+<span class="number">1</span></span><br><span class="line">    i = index</span><br><span class="line">    <span class="keyword">while</span>  i &lt;= right:</span><br><span class="line">        <span class="keyword">if</span> arr[i] &lt; arr[pivot]:</span><br><span class="line">            swap(arr, i, index)</span><br><span class="line">            index+=<span class="number">1</span></span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">    swap(arr,pivot,index-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> index-<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">swap</span>(<span class="params">arr, i, j</span>):</span></span><br><span class="line">    arr[i], arr[j] = arr[j], arr[i]</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> Python </tag>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas用法（二）</title>
      <link href="/2022/03/23/pandas2/"/>
      <url>/2022/03/23/pandas2/</url>
      
        <content type="html"><![CDATA[<p>该文档记录一些Pandas对已有数据进行合并排序等操作的方法。 ##重置行列标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">N=<span class="number">20</span></span><br><span class="line">df = pd.DataFrame(&#123;</span><br><span class="line">   <span class="string">&#x27;A&#x27;</span>: pd.date_range(start=<span class="string">&#x27;2016-01-01&#x27;</span>,periods=N,freq=<span class="string">&#x27;D&#x27;</span>),</span><br><span class="line">   <span class="string">&#x27;x&#x27;</span>: np.linspace(<span class="number">0</span>,stop=N-<span class="number">1</span>,num=N),</span><br><span class="line">   <span class="string">&#x27;y&#x27;</span>: np.random.rand(N),</span><br><span class="line">   <span class="string">&#x27;C&#x27;</span>: np.random.choice([<span class="string">&#x27;Low&#x27;</span>,<span class="string">&#x27;Medium&#x27;</span>,<span class="string">&#x27;High&#x27;</span>],N).tolist(),</span><br><span class="line">   <span class="string">&#x27;D&#x27;</span>: np.random.normal(<span class="number">100</span>, <span class="number">10</span>, size=(N)).tolist()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">#重置行、列索引标签</span></span><br><span class="line">df_reindexed = df.reindex(index=[<span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>], columns=[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;B&#x27;</span>])</span><br><span class="line">print(df_reindexed)</span><br><span class="line"><span class="comment">#            A       C   B</span></span><br><span class="line"><span class="comment"># 0 2020-12-07  Medium NaN</span></span><br><span class="line"><span class="comment"># 2 2020-12-09     Low NaN</span></span><br><span class="line"><span class="comment"># 5 2020-12-12    High NaN</span></span><br></pre></td></tr></table></figure><p><code>a= a.reindex_like(b)</code> 可以把a的index重置为与b相等的</p><h3 id="重命名标签-用-rename">重命名标签 用 rename()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">df1 = pd.DataFrame(np.random.randn(<span class="number">6</span>,<span class="number">3</span>),columns=[<span class="string">&#x27;col1&#x27;</span>,<span class="string">&#x27;col2&#x27;</span>,<span class="string">&#x27;col3&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span> (df1)</span><br><span class="line"><span class="comment">#对行和列重新命名</span></span><br><span class="line"><span class="built_in">print</span> (df1.rename(columns=&#123;<span class="string">&#x27;col1&#x27;</span> : <span class="string">&#x27;c1&#x27;</span>, <span class="string">&#x27;col2&#x27;</span> : <span class="string">&#x27;c2&#x27;</span>&#125;,index = &#123;<span class="number">0</span> : <span class="string">&#x27;apple&#x27;</span>, <span class="number">1</span> : <span class="string">&#x27;banana&#x27;</span>, <span class="number">2</span> : <span class="string">&#x27;durian&#x27;</span>&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">#        col1      col2      col3</span></span><br><span class="line"><span class="comment"># 0 -1.762133 -0.636819 -0.309572</span></span><br><span class="line"><span class="comment"># 1 -0.093965 -0.924387 -2.031457</span></span><br><span class="line"><span class="comment"># 2 -1.231485 -0.738667  1.415724</span></span><br><span class="line"><span class="comment"># 3 -0.826322  0.206574 -0.731701</span></span><br><span class="line"><span class="comment"># 4  1.863816 -0.175705  0.491907</span></span><br><span class="line"><span class="comment"># 5  0.677361  0.870041 -0.636518</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#               c1        c2      col3</span></span><br><span class="line"><span class="comment"># apple  -1.762133 -0.636819 -0.309572</span></span><br><span class="line"><span class="comment"># banana -0.093965 -0.924387 -2.031457</span></span><br><span class="line"><span class="comment"># durian -1.231485 -0.738667  1.415724</span></span><br><span class="line"><span class="comment"># 3      -0.826322  0.206574 -0.731701</span></span><br><span class="line"><span class="comment"># 4       1.863816 -0.175705  0.491907</span></span><br><span class="line"><span class="comment"># 5       0.677361  0.870041 -0.636518</span></span><br></pre></td></tr></table></figure><h2 id="排序">排序</h2><h3 id="按标签排序">按标签排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#行标签乱序排列，列标签乱序排列</span></span><br><span class="line">unsorted_df=pd.DataFrame(np.random.randn(<span class="number">10</span>,<span class="number">2</span>),index=[<span class="number">1</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">7</span>],columns=[<span class="string">&#x27;col2&#x27;</span>,<span class="string">&#x27;col1&#x27;</span>])</span><br><span class="line">print(unsorted_df)</span><br><span class="line"><span class="comment">#        col2      col1</span></span><br><span class="line"><span class="comment"># 1  0.252640 -1.219655</span></span><br><span class="line"><span class="comment"># 6 -1.192283 -0.765094</span></span><br><span class="line"><span class="comment"># 4  0.029277 -0.372222</span></span><br><span class="line"><span class="comment"># 2 -0.078161 -1.549456</span></span><br><span class="line"><span class="comment"># 3  0.500737 -0.445477</span></span><br><span class="line"><span class="comment"># 5 -0.952137 -0.129147</span></span><br><span class="line"><span class="comment"># 9 -1.748176 -1.792424</span></span><br><span class="line"><span class="comment"># 8 -0.675795  1.312546</span></span><br><span class="line"><span class="comment"># 0  0.528465  0.838617</span></span><br><span class="line"><span class="comment"># 7 -0.511180  2.226228</span></span><br></pre></td></tr></table></figure><ul><li><code>sort_index</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">sorted_df=unsorted_df.sort_index()<span class="comment">#默认对行标签进行排序</span></span><br><span class="line">print(sorted_df)</span><br><span class="line">       col2      col1</span><br><span class="line"><span class="number">0</span>  <span class="number">0.528465</span>  <span class="number">0.838617</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0.252640</span> -<span class="number">1.219655</span></span><br><span class="line"><span class="number">2</span> -<span class="number">0.078161</span> -<span class="number">1.549456</span></span><br><span class="line"><span class="number">3</span>  <span class="number">0.500737</span> -<span class="number">0.445477</span></span><br><span class="line"><span class="number">4</span>  <span class="number">0.029277</span> -<span class="number">0.372222</span></span><br><span class="line"><span class="number">5</span> -<span class="number">0.952137</span> -<span class="number">0.129147</span></span><br><span class="line"><span class="number">6</span> -<span class="number">1.192283</span> -<span class="number">0.765094</span></span><br><span class="line"><span class="number">7</span> -<span class="number">0.511180</span>  <span class="number">2.226228</span></span><br><span class="line"><span class="number">8</span> -<span class="number">0.675795</span>  <span class="number">1.312546</span></span><br><span class="line"><span class="number">9</span> -<span class="number">1.748176</span> -<span class="number">1.792424</span></span><br><span class="line"></span><br><span class="line">sorted_df = unsorted_df.sort_index(ascending=<span class="literal">False</span>)<span class="comment">#引入ascending参数实现倒序排序</span></span><br><span class="line">       col2      col1</span><br><span class="line"><span class="number">9</span> -<span class="number">1.748176</span> -<span class="number">1.792424</span></span><br><span class="line"><span class="number">8</span> -<span class="number">0.675795</span>  <span class="number">1.312546</span></span><br><span class="line"><span class="number">7</span> -<span class="number">0.511180</span>  <span class="number">2.226228</span></span><br><span class="line"><span class="number">6</span> -<span class="number">1.192283</span> -<span class="number">0.765094</span></span><br><span class="line"><span class="number">5</span> -<span class="number">0.952137</span> -<span class="number">0.129147</span></span><br><span class="line"><span class="number">4</span>  <span class="number">0.029277</span> -<span class="number">0.372222</span></span><br><span class="line"><span class="number">3</span>  <span class="number">0.500737</span> -<span class="number">0.445477</span></span><br><span class="line"><span class="number">2</span> -<span class="number">0.078161</span> -<span class="number">1.549456</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0.252640</span> -<span class="number">1.219655</span></span><br><span class="line"><span class="number">0</span>  <span class="number">0.528465</span>  <span class="number">0.838617</span></span><br><span class="line"></span><br><span class="line">sorted_df=unsorted_df.sort_index(axis=<span class="number">1</span>)<span class="comment"># axis=1则按列进行排序。</span></span><br><span class="line"><span class="built_in">print</span> (sorted_df)</span><br><span class="line">       col1      col2</span><br><span class="line"><span class="number">1</span> -<span class="number">1.219655</span>  <span class="number">0.252640</span></span><br><span class="line"><span class="number">6</span> -<span class="number">0.765094</span> -<span class="number">1.192283</span></span><br><span class="line"><span class="number">4</span> -<span class="number">0.372222</span>  <span class="number">0.029277</span></span><br><span class="line"><span class="number">2</span> -<span class="number">1.549456</span> -<span class="number">0.078161</span></span><br><span class="line"><span class="number">3</span> -<span class="number">0.445477</span>  <span class="number">0.500737</span></span><br><span class="line"><span class="number">5</span> -<span class="number">0.129147</span> -<span class="number">0.952137</span></span><br><span class="line"><span class="number">9</span> -<span class="number">1.792424</span> -<span class="number">1.748176</span></span><br><span class="line"><span class="number">8</span>  <span class="number">1.312546</span> -<span class="number">0.675795</span></span><br><span class="line"><span class="number">0</span>  <span class="number">0.838617</span>  <span class="number">0.528465</span></span><br><span class="line"><span class="number">7</span>  <span class="number">2.226228</span> -<span class="number">0.511180</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">unsorted_df = pd.DataFrame(&#123;<span class="string">&#x27;col1&#x27;</span>:[<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],<span class="string">&#x27;col2&#x27;</span>:[<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>]&#125;)</span><br><span class="line">sorted_df = unsorted_df.sort_values(by=<span class="string">&#x27;col1&#x27;</span>)<span class="comment">#对col1进行排序</span></span><br><span class="line"><span class="built_in">print</span> (sorted_df)</span><br><span class="line">   col1  col2</span><br><span class="line"><span class="number">1</span>     <span class="number">1</span>     <span class="number">3</span></span><br><span class="line"><span class="number">2</span>     <span class="number">1</span>     <span class="number">2</span></span><br><span class="line"><span class="number">3</span>     <span class="number">1</span>     <span class="number">4</span></span><br><span class="line"><span class="number">0</span>     <span class="number">2</span>     <span class="number">1</span></span><br><span class="line"></span><br><span class="line">sorted_df = unsorted_df.sort_values(by=[<span class="string">&#x27;col1&#x27;</span>,<span class="string">&#x27;col2&#x27;</span>])<span class="comment">#引入列表对两列进行排序</span></span><br><span class="line"><span class="built_in">print</span> (sorted_df)</span><br><span class="line">   col1  col2</span><br><span class="line"><span class="number">2</span>     <span class="number">1</span>     <span class="number">2</span></span><br><span class="line"><span class="number">1</span>     <span class="number">1</span>     <span class="number">3</span></span><br><span class="line"><span class="number">3</span>     <span class="number">1</span>     <span class="number">4</span></span><br><span class="line"><span class="number">0</span>     <span class="number">2</span>     <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="排序算法">排序算法</h3><ul><li><p><code>sort_values()</code></p><p>提供了三种排序算法</p><ol type="1"><li>mergesort 归并</li><li>heapsort 堆</li><li>quicksort 快速</li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">unsorted_df = pd.DataFrame(&#123;<span class="string">&#x27;col1&#x27;</span>:[<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],<span class="string">&#x27;col2&#x27;</span>:[<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>]&#125;)</span><br><span class="line">sorted_df = unsorted_df.sort_values(by=<span class="string">&#x27;col1&#x27;</span> ,kind=<span class="string">&#x27;mergesort&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (sorted_df)</span><br><span class="line">   col1  col2</span><br><span class="line"><span class="number">1</span>     <span class="number">1</span>     <span class="number">3</span></span><br><span class="line"><span class="number">2</span>     <span class="number">1</span>     <span class="number">2</span></span><br><span class="line"><span class="number">3</span>     <span class="number">1</span>     <span class="number">4</span></span><br><span class="line"><span class="number">0</span>     <span class="number">2</span>     <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="去重">去重</h2><p><code>df.drop_duplicates(subset=['A','B','C'],keep='first',inplace=True)</code></p><table><colgroup><col style="width: 4%" /><col style="width: 96%" /></colgroup><thead><tr class="header"><th>参数</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>subset</td><td>表示要进去重的列名，默认为 None。</td></tr><tr class="even"><td>keep</td><td>有三个可选参数，分别是 first、last、False，默认为first，表示只保留第一次出现的重复项，删除其余重复项，last表示只保留最后一次出现的重复项，False 则表示删除所有重复项。</td></tr><tr class="odd"><td>inplace</td><td>布尔值参数，默认为 False 表示删除重复项后返回一个副本，若为 Ture则表示直接在原数据上删除重复项。</td></tr></tbody></table><ul><li>首先创建一个有重复值的DataFrame</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data=&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>:[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">    <span class="string">&#x27;B&#x27;</span>:[<span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">0</span>],</span><br><span class="line">    <span class="string">&#x27;C&#x27;</span>:[<span class="number">4</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">4</span>],</span><br><span class="line">    <span class="string">&#x27;D&#x27;</span>:[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">df=pd.DataFrame(data=data)</span><br><span class="line">print(df)</span><br><span class="line">  A B C D</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">5</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">0</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">df.drop_duplicates()<span class="comment">#默认保留第一次出现的重复值</span></span><br><span class="line"></span><br><span class="line">  A B C D</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">5</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">df.drop_duplicates(keep=<span class="literal">False</span>)<span class="comment">#去除所有重复值</span></span><br><span class="line">  A B C D</span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">5</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line">df.drop_duplicates(subset=[<span class="string">&#x27;B&#x27;</span>],keep=<span class="literal">False</span>)<span class="comment">#去除所有重复项，对于B列来说两个0是重复项</span></span><br><span class="line"></span><br><span class="line">df.drop_duplicates([<span class="string">&#x27;B&#x27;</span>],keep=<span class="string">&#x27;last&#x27;</span>)<span class="comment">#保留最后一个重复值</span></span><br></pre></td></tr></table></figure><h2 id="处理字符串的方法">处理字符串的方法</h2><table><colgroup><col style="width: 20%" /><col style="width: 79%" /></colgroup><thead><tr class="header"><th>函数名称</th><th>函数功能和描述</th></tr></thead><tbody><tr class="odd"><td>lower()</td><td>将的字符串转换为小写。</td></tr><tr class="even"><td>upper()</td><td>将的字符串转换为大写。</td></tr><tr class="odd"><td>len()</td><td>得出字符串的长度。</td></tr><tr class="even"><td>strip()</td><td>去除字符串两边的空格（包含换行符）。</td></tr><tr class="odd"><td>split()</td><td>用指定的分割符分割字符串。</td></tr><tr class="even"><td>cat(sep="")</td><td>用给定的分隔符连接字符串元素。</td></tr><tr class="odd"><td>get_dummies()</td><td>返回一个带有独热编码值的 DataFrame 结构。</td></tr><tr class="even"><td>contains(pattern</td><td>) 如果子字符串包含在元素中，则为每个元素返回一个布尔值 True，否则为False。</td></tr><tr class="odd"><td>replace(a,b)</td><td>将值 a 替换为值 b。</td></tr><tr class="even"><td>count(pattern)</td><td>返回每个字符串元素出现的次数。</td></tr><tr class="odd"><td>startswith(pattern)</td><td>如果 Series 中的元素以指定的字符串开头，则返回 True。</td></tr><tr class="even"><td>endswith(pattern)</td><td>如果 Series 中的元素以指定的字符串结尾，则返回 True。</td></tr><tr class="odd"><td>findall(pattern)</td><td>以列表的形式返出现的字符串。</td></tr><tr class="even"><td>swapcase()</td><td>交换大小写。</td></tr><tr class="odd"><td>islower()</td><td>返回布尔值，检查 Series中组成每个字符串的所有字符是否都为小写。</td></tr><tr class="even"><td>issupper()</td><td>返回布尔值，检查 Series中组成每个字符串的所有字符是否都为大写。</td></tr><tr class="odd"><td>isnumeric()</td><td>返回布尔值，检查 Series中组成每个字符串的所有字符是否都为数字。</td></tr><tr class="even"><td>repeat(value)</td><td>以指定的次数重复每个元素。</td></tr><tr class="odd"><td>find(pattern)</td><td>返回字符串第一次出现的索引位置</td></tr></tbody></table><ul><li>使用方法 Dataframe/Series.str.[上述的函数]</li></ul><h2 id="分组操作">分组操作</h2><ul><li>使用<code>groupby()</code> df.groupby("key")df.groupby("key",axis=1) df.groupby(["key1","key2"])</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data = &#123;<span class="string">&#x27;Name&#x27;</span>: [<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Helen&#x27;</span>, <span class="string">&#x27;Sona&#x27;</span>, <span class="string">&#x27;Ella&#x27;</span>],</span><br><span class="line">   <span class="string">&#x27;score&#x27;</span>: [<span class="number">82</span>, <span class="number">98</span>, <span class="number">91</span>, <span class="number">87</span>],</span><br><span class="line">   <span class="string">&#x27;option_course&#x27;</span>: [<span class="string">&#x27;C#&#x27;</span>,<span class="string">&#x27;Python&#x27;</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="string">&#x27;C&#x27;</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"><span class="comment">#查看分组</span></span><br><span class="line">print(df.groupby(<span class="string">&#x27;score&#x27;</span>).groups)</span><br><span class="line"></span><br><span class="line">&#123;<span class="number">82</span>: Int64Index([<span class="number">0</span>], dtype=<span class="string">&#x27;int64&#x27;</span>), </span><br><span class="line"><span class="number">87</span>: Int64Index([<span class="number">3</span>], dtype=<span class="string">&#x27;int64&#x27;</span>), </span><br><span class="line"><span class="number">91</span>: Int64Index([<span class="number">2</span>], dtype=<span class="string">&#x27;int64&#x27;</span>), </span><br><span class="line"><span class="number">98</span>: Int64Index([<span class="number">1</span>], dtype=<span class="string">&#x27;int64&#x27;</span>)&#125;</span><br><span class="line"></span><br><span class="line">print(df.groupby([<span class="string">&#x27;Name&#x27;</span>,<span class="string">&#x27;score&#x27;</span>]).groups)<span class="comment">#指定多个标签</span></span><br><span class="line">&#123;(<span class="string">&#x27;Ella&#x27;</span>, <span class="number">87</span>): Int64Index([<span class="number">3</span>], dtype=<span class="string">&#x27;int64&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;Helen&#x27;</span>, <span class="number">98</span>): Int64Index([<span class="number">1</span>], dtype=<span class="string">&#x27;int64&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;John&#x27;</span>, <span class="number">82</span>): Int64Index([<span class="number">0</span>], dtype=<span class="string">&#x27;int64&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;Sona&#x27;</span>, <span class="number">91</span>): Int64Index([<span class="number">2</span>], dtype=<span class="string">&#x27;int64&#x27;</span>)&#125;</span><br></pre></td></tr></table></figure><h3 id="通过-get_group-方法可以选择组内的具体数据项">通过 get_group()方法可以选择组内的具体数据项：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data = &#123;<span class="string">&#x27;Name&#x27;</span>: [<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Helen&#x27;</span>, <span class="string">&#x27;Sona&#x27;</span>, <span class="string">&#x27;Ella&#x27;</span>],</span><br><span class="line">   <span class="string">&#x27;score&#x27;</span>: [<span class="number">82</span>, <span class="number">98</span>, <span class="number">91</span>, <span class="number">87</span>],</span><br><span class="line">   <span class="string">&#x27;option_course&#x27;</span>: [<span class="string">&#x27;C#&#x27;</span>,<span class="string">&#x27;Python&#x27;</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="string">&#x27;C&#x27;</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"><span class="comment">#根据score来分组</span></span><br><span class="line">grouped=df.groupby(<span class="string">&#x27;score&#x27;</span>)</span><br><span class="line"><span class="comment">#根据对应组的数据值，选择一个组</span></span><br><span class="line">print(grouped.get_group(<span class="number">91</span>))</span><br><span class="line">   Name  score option_course</span><br><span class="line"><span class="number">2</span>  Sona     <span class="number">91</span>          Java</span><br></pre></td></tr></table></figure><h2 id="合并">合并</h2><p>使用 merge()<br /><code>pd.merge(left, right, how='inner', on=None, left_on=None, right_on=None,left_index=False, right_index=False, sort=True,suffixes=('_x', '_y'), copy=True)</code></p><table><colgroup><col style="width: 6%" /><col style="width: 93%" /></colgroup><thead><tr class="header"><th>参数名称</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>left/right</td><td>两个不同的 DataFrame 对象。</td></tr><tr class="even"><td>on</td><td>指定用于连接的键（即列标签的名字），该键必须同时存在于左右两个DataFrame 中，如果没有指定，并且其他参数也未指定， 那么将会以两个DataFrame 的列名交集做为连接键。</td></tr><tr class="odd"><td>left_on</td><td>指定左侧 DataFrame中作连接键的列名。该参数在左、右列标签名不相同，但表达的含义相同时非常有用。</td></tr><tr class="even"><td>right_on</td><td>指定左侧 DataFrame 中作连接键的列名。</td></tr><tr class="odd"><td>left_index</td><td>布尔参数，默认为 False。如果为 True 则使用左侧 DataFrame的行索引作为连接键，若 DataFrame具有多层索引(MultiIndex)，则层的数量必须与连接键的数量相等。</td></tr><tr class="even"><td>right_index</td><td>布尔参数，默认为 False。如果为 True 则使用左侧 DataFrame的行索引作为连接键。</td></tr><tr class="odd"><td>how</td><td>要执行的合并类型，从 {'left', 'right', 'outer', 'inner'}中取值，默认为“inner”内连接。</td></tr><tr class="even"><td>sort</td><td>布尔值参数，默认为True，它会将合并后的数据进行排序；若设置为False，则按照 how 给定的参数值进行排序。</td></tr><tr class="odd"><td>suffixes</td><td>字符串组成的元组。当左右 DataFrame存在相同列名时，通过该参数可以在相同的列名后附加后缀名，默认为('_x','_y')。</td></tr><tr class="even"><td>copy</td><td>默认为 True，表示对数据进行复制。</td></tr></tbody></table><h3 id="excemple">Excemple</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line">left = pd.DataFrame(&#123; </span><br><span class="line">   <span class="string">&#x27;id&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], </span><br><span class="line">   <span class="string">&#x27;Name&#x27;</span>: [<span class="string">&#x27;Smith&#x27;</span>, <span class="string">&#x27;Maiki&#x27;</span>, <span class="string">&#x27;Hunter&#x27;</span>, <span class="string">&#x27;Hilen&#x27;</span>], </span><br><span class="line">   <span class="string">&#x27;subject_id&#x27;</span>:[<span class="string">&#x27;sub1&#x27;</span>,<span class="string">&#x27;sub2&#x27;</span>,<span class="string">&#x27;sub4&#x27;</span>,<span class="string">&#x27;sub6&#x27;</span>]&#125;) </span><br><span class="line">right = pd.DataFrame(&#123; </span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], </span><br><span class="line">   <span class="string">&#x27;Name&#x27;</span>: [<span class="string">&#x27;William&#x27;</span>, <span class="string">&#x27;Albert&#x27;</span>, <span class="string">&#x27;Tony&#x27;</span>, <span class="string">&#x27;Allen&#x27;</span>], </span><br><span class="line">   <span class="string">&#x27;subject_id&#x27;</span>:[<span class="string">&#x27;sub2&#x27;</span>,<span class="string">&#x27;sub4&#x27;</span>,<span class="string">&#x27;sub3&#x27;</span>,<span class="string">&#x27;sub6&#x27;</span>]&#125;) </span><br><span class="line"><span class="built_in">print</span> (left) </span><br><span class="line"><span class="built_in">print</span> (right)  </span><br><span class="line">   <span class="built_in">id</span>    Name subject_id</span><br><span class="line"><span class="number">0</span>   <span class="number">1</span>   Smith       sub1</span><br><span class="line"><span class="number">1</span>   <span class="number">2</span>   Maiki       sub2</span><br><span class="line"><span class="number">2</span>   <span class="number">3</span>  Hunter       sub4</span><br><span class="line"><span class="number">3</span>   <span class="number">4</span>   Hilen       sub6</span><br><span class="line"></span><br><span class="line">   <span class="built_in">id</span>     Name subject_id</span><br><span class="line"><span class="number">0</span>   <span class="number">1</span>  William       sub2</span><br><span class="line"><span class="number">1</span>   <span class="number">2</span>   Albert       sub4</span><br><span class="line"><span class="number">2</span>   <span class="number">3</span>     Tony       sub3</span><br><span class="line"><span class="number">3</span>   <span class="number">4</span>    Allen       sub6</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过on参数指定合并的键</span></span><br><span class="line">print(pd.merge(left,right,on=<span class="string">&#x27;id&#x27;</span>))</span><br><span class="line"></span><br><span class="line">   <span class="built_in">id</span>  Name_x subject_id_x   Name_y subject_id_y</span><br><span class="line"><span class="number">0</span>   <span class="number">1</span>   Smith         sub1  William         sub2</span><br><span class="line"><span class="number">1</span>   <span class="number">2</span>   Maiki         sub2   Albert         sub4</span><br><span class="line"><span class="number">2</span>   <span class="number">3</span>  Hunter         sub4     Tony         sub3</span><br><span class="line"><span class="number">3</span>   <span class="number">4</span>   Hilen         sub6    Allen         sub6</span><br><span class="line"><span class="comment">#多个键上合并</span></span><br><span class="line">print(pd.merge(left,right,on=[<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;subject_id&#x27;</span>]))</span><br><span class="line">   <span class="built_in">id</span> Name_x subject_id Name_y</span><br><span class="line"><span class="number">0</span>   <span class="number">4</span>  Hilen       sub6   Mike</span><br></pre></td></tr></table></figure><h4 id="how参数">How参数</h4><table><thead><tr class="header"><th>Merge方法</th><th>等效 SQL</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>left</td><td>LEFT OUTER JOIN</td><td>使用左侧对象的key</td></tr><tr class="even"><td>right</td><td>RIGHT OUTER JOIN</td><td>使用右侧对象的key</td></tr><tr class="odd"><td>outer</td><td>FULL OUTER JOIN</td><td>使用左右两侧所有key的并集</td></tr><tr class="even"><td>inner</td><td>INNER JOIN</td><td>使用左右两侧key的交集</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line">left = pd.DataFrame(&#123; </span><br><span class="line">   <span class="string">&#x27;id&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], </span><br><span class="line">   <span class="string">&#x27;Name&#x27;</span>: [<span class="string">&#x27;Smith&#x27;</span>, <span class="string">&#x27;Maiki&#x27;</span>, <span class="string">&#x27;Hunter&#x27;</span>, <span class="string">&#x27;Hilen&#x27;</span>], </span><br><span class="line">   <span class="string">&#x27;subject_id&#x27;</span>:[<span class="string">&#x27;sub1&#x27;</span>,<span class="string">&#x27;sub2&#x27;</span>,<span class="string">&#x27;sub4&#x27;</span>,<span class="string">&#x27;sub6&#x27;</span>]&#125;) </span><br><span class="line">right = pd.DataFrame(&#123; </span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], </span><br><span class="line">   <span class="string">&#x27;Name&#x27;</span>: [<span class="string">&#x27;Bill&#x27;</span>, <span class="string">&#x27;Lucy&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;Mike&#x27;</span>], </span><br><span class="line">   <span class="string">&#x27;subject_id&#x27;</span>:[<span class="string">&#x27;sub2&#x27;</span>,<span class="string">&#x27;sub4&#x27;</span>,<span class="string">&#x27;sub3&#x27;</span>,<span class="string">&#x27;sub6&#x27;</span>]&#125;) </span><br><span class="line"><span class="comment">#以left侧的subject_id为键</span></span><br><span class="line">print(pd.merge(left,right,on=<span class="string">&#x27;subject_id&#x27;</span>,how=<span class="string">&quot;left&quot;</span>))</span><br><span class="line"></span><br><span class="line">   id_x  Name_x subject_id  id_y Name_y</span><br><span class="line"><span class="number">0</span>     <span class="number">1</span>   Smith       sub1   NaN    NaN</span><br><span class="line"><span class="number">1</span>     <span class="number">2</span>   Maiki       sub2   <span class="number">1.0</span>   Bill</span><br><span class="line"><span class="number">2</span>     <span class="number">3</span>  Hunter       sub4   <span class="number">2.0</span>   Lucy</span><br><span class="line"><span class="number">3</span>     <span class="number">4</span>   Hilen       sub6   <span class="number">4.0</span>   Mike</span><br><span class="line"></span><br><span class="line"><span class="comment">#以right侧的subject_id为键</span></span><br><span class="line">print(pd.merge(left,right,on=<span class="string">&#x27;subject_id&#x27;</span>,how=<span class="string">&quot;right&quot;</span>))</span><br><span class="line"></span><br><span class="line">   id_x  Name_x subject_id  id_y Name_y</span><br><span class="line"><span class="number">0</span>   <span class="number">2.0</span>   Maiki       sub2     <span class="number">1</span>   Bill</span><br><span class="line"><span class="number">1</span>   <span class="number">3.0</span>  Hunter       sub4     <span class="number">2</span>   Lucy</span><br><span class="line"><span class="number">2</span>   <span class="number">4.0</span>   Hilen       sub6     <span class="number">4</span>   Mike</span><br><span class="line"><span class="number">3</span>   NaN     NaN       sub3     <span class="number">3</span>   Jack</span><br><span class="line"></span><br><span class="line"><span class="comment">#求出两个subject_id的并集，并作为键</span></span><br><span class="line">print(pd.merge(left,right,on=<span class="string">&#x27;subject_id&#x27;</span>,how=<span class="string">&quot;outer&quot;</span>))</span><br><span class="line">   id_x  Name_x subject_id  id_y Name_y</span><br><span class="line"><span class="number">0</span>   <span class="number">1.0</span>   Smith       sub1   NaN    NaN</span><br><span class="line"><span class="number">1</span>   <span class="number">2.0</span>   Maiki       sub2   <span class="number">1.0</span>   Bill</span><br><span class="line"><span class="number">2</span>   <span class="number">3.0</span>  Hunter       sub4   <span class="number">2.0</span>   Lucy</span><br><span class="line"><span class="number">3</span>   <span class="number">4.0</span>   Hilen       sub6   <span class="number">4.0</span>   Mike</span><br><span class="line"><span class="number">4</span>   NaN     NaN       sub3   <span class="number">3.0</span>   Jack</span><br><span class="line"></span><br><span class="line"><span class="comment">#求出两个subject_id的交集，并将结果作为键</span></span><br><span class="line">print(pd.merge(left,right,on=<span class="string">&#x27;subject_id&#x27;</span>,how=<span class="string">&quot;inner&quot;</span>))</span><br><span class="line">   id_x  Name_x subject_id  id_y Name_y</span><br><span class="line"><span class="number">0</span>     <span class="number">2</span>   Maiki       sub2     <span class="number">1</span>   Bill</span><br><span class="line"><span class="number">1</span>     <span class="number">3</span>  Hunter       sub4     <span class="number">2</span>   Lucy</span><br><span class="line"><span class="number">2</span>     <span class="number">4</span>   Hilen       sub6     <span class="number">4</span>   Mike</span><br></pre></td></tr></table></figure><h2 id="concat连接">concat连接</h2><p><code>pd.concat(objs,axis=0,join='outer',join_axes=None,ignore_index=False)</code></p><table><colgroup><col style="width: 12%" /><col style="width: 87%" /></colgroup><thead><tr class="header"><th>参数名称</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>objs</td><td>一个序列或者是Series、DataFrame对象。</td></tr><tr class="even"><td>axis</td><td>表示在哪个轴方向上（行或者列）进行连接操作，默认 axis=0表示行方向。</td></tr><tr class="odd"><td>join</td><td>指定连接方式，取值为{"inner","outer"}，默认为 outer表示取并集，inner代表取交集。</td></tr><tr class="even"><td>ignore_index</td><td>布尔值参数，默认为 False，如果为True，表示不在连接的轴上使用索引。</td></tr><tr class="odd"><td>join_axes</td><td>表示索引对象的列表。</td></tr></tbody></table><h3 id="excemple-1">Excemple</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">a= pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>: [<span class="string">&#x27;A0&#x27;</span>, <span class="string">&#x27;A1&#x27;</span>, <span class="string">&#x27;A2&#x27;</span>, <span class="string">&#x27;A3&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;B&#x27;</span>: [<span class="string">&#x27;B0&#x27;</span>, <span class="string">&#x27;B1&#x27;</span>, <span class="string">&#x27;B2&#x27;</span>, <span class="string">&#x27;B3&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;C&#x27;</span>: [<span class="string">&#x27;C0&#x27;</span>, <span class="string">&#x27;C1&#x27;</span>, <span class="string">&#x27;C2&#x27;</span>, <span class="string">&#x27;C3&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;D&#x27;</span>: [<span class="string">&#x27;D0&#x27;</span>, <span class="string">&#x27;D1&#x27;</span>, <span class="string">&#x27;D2&#x27;</span>, <span class="string">&#x27;D3&#x27;</span>]&#125;,</span><br><span class="line">                    index=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">b= pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>: [<span class="string">&#x27;A4&#x27;</span>, <span class="string">&#x27;A5&#x27;</span>, <span class="string">&#x27;A6&#x27;</span>, <span class="string">&#x27;A7&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;B&#x27;</span>: [<span class="string">&#x27;B4&#x27;</span>, <span class="string">&#x27;B5&#x27;</span>, <span class="string">&#x27;B6&#x27;</span>, <span class="string">&#x27;B7&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;C&#x27;</span>: [<span class="string">&#x27;C4&#x27;</span>, <span class="string">&#x27;C5&#x27;</span>, <span class="string">&#x27;C6&#x27;</span>, <span class="string">&#x27;C7&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;D&#x27;</span>: [<span class="string">&#x27;D4&#x27;</span>, <span class="string">&#x27;D5&#x27;</span>, <span class="string">&#x27;D6&#x27;</span>, <span class="string">&#x27;D7&#x27;</span>]&#125;,</span><br><span class="line">                   index=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"><span class="comment">#连接a与b</span></span><br><span class="line">print(pd.concat([a,b]))  和append()相似</span><br><span class="line">    A   B   C   D</span><br><span class="line"><span class="number">0</span>  A0  B0  C0  D0</span><br><span class="line"><span class="number">1</span>  A1  B1  C1  D1</span><br><span class="line"><span class="number">2</span>  A2  B2  C2  D2</span><br><span class="line"><span class="number">3</span>  A3  B3  C3  D3</span><br><span class="line"><span class="number">2</span>  A4  B4  C4  D4</span><br><span class="line"><span class="number">3</span>  A5  B5  C5  D5</span><br><span class="line"><span class="number">4</span>  A6  B6  C6  D6</span><br><span class="line"><span class="number">5</span>  A7  B7  C7  D7</span><br><span class="line"></span><br><span class="line"><span class="comment">#连接a与b,并给a，b连接一个指定的键</span></span><br><span class="line">print(pd.concat([a,b],keys=[<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>]))</span><br><span class="line">      A   B   C   D</span><br><span class="line">x <span class="number">0</span>  A0  B0  C0  D0</span><br><span class="line">  <span class="number">1</span>  A1  B1  C1  D1</span><br><span class="line">  <span class="number">2</span>  A2  B2  C2  D2</span><br><span class="line">  <span class="number">3</span>  A3  B3  C3  D3</span><br><span class="line">y <span class="number">2</span>  A4  B4  C4  D1</span><br><span class="line">  <span class="number">3</span>  A5  B5  C5  D2</span><br><span class="line">  <span class="number">4</span>  A6  B6  C6  D5</span><br><span class="line">  <span class="number">5</span>  A7  B7  C7  D6</span><br><span class="line"></span><br><span class="line"><span class="comment">#连接a与b,设置 ignore_index 等于 True</span></span><br><span class="line">print(pd.concat([a,b],keys=[<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>],ignore_index=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">    A   B   C   D</span><br><span class="line"><span class="number">0</span>  A0  B0  C0  D0</span><br><span class="line"><span class="number">1</span>  A1  B1  C1  D1</span><br><span class="line"><span class="number">2</span>  A2  B2  C2  D2</span><br><span class="line"><span class="number">3</span>  A3  B3  C3  D3</span><br><span class="line"><span class="number">4</span>  A4  B4  C4  D1</span><br><span class="line"><span class="number">5</span>  A5  B5  C5  D2</span><br><span class="line"><span class="number">6</span>  A6  B6  C6  D5</span><br><span class="line"><span class="number">7</span>  A7  B7  C7  D6</span><br><span class="line">此时的索引顺序被改变了，而且键 keys 指定的键也被覆盖了。</span><br><span class="line"></span><br><span class="line"><span class="comment">#沿着 axis=1，连接a与b</span></span><br><span class="line">print(pd.concat([a,b],axis=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">     A    B    C    D    A    B    C    D</span><br><span class="line"><span class="number">0</span>   A0   B0   C0   D0  NaN  NaN  NaN  NaN</span><br><span class="line"><span class="number">1</span>   A1   B1   C1   D1  NaN  NaN  NaN  NaN</span><br><span class="line"><span class="number">2</span>   A2   B2   C2   D2  NaN  NaN  NaN  NaN</span><br><span class="line"><span class="number">3</span>   A3   B3   C3   D3  NaN  NaN  NaN  NaN</span><br><span class="line"><span class="number">2</span>  NaN  NaN  NaN  NaN   A4   B4   C4   D1</span><br><span class="line"><span class="number">3</span>  NaN  NaN  NaN  NaN   A5   B5   C5   D2</span><br><span class="line"><span class="number">4</span>  NaN  NaN  NaN  NaN   A6   B6   C6   D5</span><br><span class="line"><span class="number">5</span>  NaN  NaN  NaN  NaN   A7   B7   C7   D6</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> Python </tag>
            
            <tag> Data </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas用法（一）</title>
      <link href="/2022/03/23/pandas/"/>
      <url>/2022/03/23/pandas/</url>
      
        <content type="html"><![CDATA[<p>本文档记录Pandas的各种使用方法，方便自己后续查阅。</p><h2 id="数据类型">数据类型</h2><table><colgroup><col style="width: 5%" /><col style="width: 2%" /><col style="width: 92%" /></colgroup><thead><tr class="header"><th>数据结构</th><th>维度</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>Series</td><td>1</td><td>该结构能够存储各种数据类型，比如字符数、整数、浮点数、Python对象等，Series 用 name 和 index 属性来描述数据值。Series是一维数据结构，因此其维数不可以改变。</td></tr><tr class="even"><td>DataFrame</td><td>2</td><td>DataFrame是一种二维表格型数据的结构，既有行索引，也有列索引。行索引是index，列索引是 columns。在创建该结构时，可以指定相应的索引值。</td></tr></tbody></table><h3 id="series">Series</h3><figure><imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220323/series结构.1g0lrmypqfds.webp"alt="series结构" /><figcaption aria-hidden="true">series结构</figcaption></figure><h4 id="创建series对象">创建Series对象</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">s=pd.Series( data, index, dtype, copy)</span><br></pre></td></tr></table></figure><table><colgroup><col style="width: 11%" /><col style="width: 88%" /></colgroup><thead><tr class="header"><th>参数名称</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>data</td><td>输入的数据，可以是列表、常量、ndarray 数组等。</td></tr><tr class="even"><td>index</td><td>索引值必须是惟一的，如果没有传递索引，则默认为 np.arrange(n)。</td></tr><tr class="odd"><td>dtype</td><td>dtype表示数据类型，如果没有提供，则会自动判断得出。</td></tr><tr class="even"><td>copy</td><td>表示对 data 进行拷贝，默认为 False。</td></tr></tbody></table><h4 id="dict-创建-series">dict 创建 Series</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data = &#123;<span class="string">&#x27;a&#x27;</span> : <span class="number">0.</span>, <span class="string">&#x27;b&#x27;</span> : <span class="number">1.</span>, <span class="string">&#x27;c&#x27;</span> : <span class="number">2.</span>&#125;</span><br><span class="line">s = pd.Series(data)</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><p>输出结果 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a <span class="number">0.0</span></span><br><span class="line">b <span class="number">1.0</span></span><br><span class="line">c <span class="number">2.0</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure> #### 访问Series <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">s = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],index = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>])</span><br><span class="line">print(s[<span class="number">0</span>])  <span class="comment">#位置下标</span></span><br><span class="line">print(s[<span class="string">&#x27;a&#x27;</span>]) <span class="comment">#标签下标</span></span><br><span class="line">print(s[:<span class="number">3</span>]) <span class="comment">#支持切片</span></span><br><span class="line">s.head()<span class="comment">#默认显示前5行</span></span><br><span class="line">s.tail()<span class="comment">#默认显示后5行</span></span><br></pre></td></tr></table></figure> ### DataFrame<imgsrc="https://www.runoob.com/wp-content/uploads/2021/04/pandas-DataStructure.png"alt="结构图" /></p><h4 id="创建dataframe">创建Dataframe</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.DataFrame( data, index, columns, dtype, copy)</span><br></pre></td></tr></table></figure><table><colgroup><col style="width: 8%" /><col style="width: 91%" /></colgroup><thead><tr class="header"><th>参数名称</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>data</td><td>输入的数据，可以是 ndarray，series，list，dict，标量以及一个DataFrame。</td></tr><tr class="even"><td>index</td><td>行标签，如果没有传递 index 值，则默认行标签是 np.arange(n)，n 代表data 的元素个数。</td></tr><tr class="odd"><td>columns</td><td>列标签，如果没有传递 columns 值，则默认列标签是 np.arange(n)。</td></tr><tr class="even"><td>dtype</td><td>dtype表示每一列的数据类型。</td></tr><tr class="odd"><td>copy</td><td>默认为 False，表示复制数据 data。</td></tr></tbody></table><ul><li><strong>各种创建方法</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">df = pd.DataFrame(data)]</span><br><span class="line"></span><br><span class="line">data = [[<span class="string">&#x27;Alex&#x27;</span>,<span class="number">10</span>],[<span class="string">&#x27;Bob&#x27;</span>,<span class="number">12</span>],[<span class="string">&#x27;Clarke&#x27;</span>,<span class="number">13</span>]]</span><br><span class="line">df = pd.DataFrame(data,columns=[<span class="string">&#x27;Name&#x27;</span>,<span class="string">&#x27;Age&#x27;</span>])</span><br><span class="line"></span><br><span class="line">data = [[<span class="string">&#x27;Alex&#x27;</span>,<span class="number">10</span>],[<span class="string">&#x27;Bob&#x27;</span>,<span class="number">12</span>],[<span class="string">&#x27;Clarke&#x27;</span>,<span class="number">13</span>]]</span><br><span class="line">df = pd.DataFrame(data,columns=[<span class="string">&#x27;Name&#x27;</span>,<span class="string">&#x27;Age&#x27;</span>],dtype=<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;Name&#x27;</span>:[<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;Steve&#x27;</span>, <span class="string">&#x27;Ricky&#x27;</span>],<span class="string">&#x27;Age&#x27;</span>:[<span class="number">28</span>,<span class="number">34</span>,<span class="number">29</span>,<span class="number">42</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;Name&#x27;</span>:[<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;Steve&#x27;</span>, <span class="string">&#x27;Ricky&#x27;</span>],<span class="string">&#x27;Age&#x27;</span>:[<span class="number">28</span>,<span class="number">34</span>,<span class="number">29</span>,<span class="number">42</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data, index=[<span class="string">&#x27;rank1&#x27;</span>,<span class="string">&#x27;rank2&#x27;</span>,<span class="string">&#x27;rank3&#x27;</span>,<span class="string">&#x27;rank4&#x27;</span>])</span><br><span class="line"></span><br><span class="line">data = [&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;,&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">20</span>&#125;]</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"><span class="comment">#     a    b      c</span></span><br><span class="line"><span class="comment"># 0   1   2     NaN</span></span><br><span class="line"><span class="comment"># 1   5   10   20.0</span></span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">&#x27;one&#x27;</span> : pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]),</span><br><span class="line">   <span class="string">&#x27;two&#x27;</span> : pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])&#125;</span><br><span class="line">df = pd.DataFrame(d)  <span class="comment">#利用Series创建</span></span><br></pre></td></tr></table></figure> ####列索引操作Dataframe(按列来操作)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mport pandas <span class="keyword">as</span> pd</span><br><span class="line">d = &#123;<span class="string">&#x27;one&#x27;</span> : pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]),</span><br><span class="line">   <span class="string">&#x27;two&#x27;</span> : pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])&#125;</span><br><span class="line">df = pd.DataFrame(d)</span><br><span class="line">print(df [<span class="string">&#x27;one&#x27;</span>]) <span class="comment">#读取one这一列的数据</span></span><br><span class="line"><span class="comment">#使用df[&#x27;列&#x27;]=值，插入新的数据列</span></span><br><span class="line">df[<span class="string">&#x27;three&#x27;</span>]=pd.Series([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>],index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>])</span><br><span class="line">print(df)</span><br><span class="line"><span class="comment">#将已经存在的数据列做相加运算</span></span><br><span class="line">df[<span class="string">&#x27;four&#x27;</span>]=df[<span class="string">&#x27;one&#x27;</span>]+df[<span class="string">&#x27;three&#x27;</span>]</span><br><span class="line">            one   two   three    four</span><br><span class="line">        a     <span class="number">1.0</span>    <span class="number">1</span>    <span class="number">10.0</span>     <span class="number">11.0</span></span><br><span class="line">        b     <span class="number">2.0</span>    <span class="number">2</span>    <span class="number">20.0</span>     <span class="number">22.0</span></span><br><span class="line">        c     <span class="number">3.0</span>    <span class="number">3</span>    <span class="number">30.0</span>     <span class="number">33.0</span></span><br><span class="line">        d     NaN    <span class="number">4</span>     NaN     NaN</span><br><span class="line"><span class="comment">#数值1代表插入到columns列表的索引位置</span></span><br><span class="line">df.insert(<span class="number">1</span>,column=<span class="string">&#x27;score&#x27;</span>,value=[<span class="number">91</span>,<span class="number">90</span>,<span class="number">75</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line"><span class="comment">#使用del删除</span></span><br><span class="line"><span class="keyword">del</span> df[<span class="string">&#x27;one&#x27;</span>]</span><br><span class="line"><span class="comment">#使用pop方法删除</span></span><br><span class="line">df.pop(<span class="string">&#x27;two&#x27;</span>)</span><br></pre></td></tr></table></figure><h4id="行索引操作dataframe对行进行操作">行索引操作DataFrame(对行进行操作)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">d = &#123;<span class="string">&#x27;one&#x27;</span> : pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]),</span><br><span class="line">   <span class="string">&#x27;two&#x27;</span> : pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])&#125;</span><br><span class="line">df = pd.DataFrame(d)</span><br><span class="line">print(df.loc[<span class="string">&#x27;b&#x27;</span>])<span class="comment">#获取第b行数据 loc 只能提取标签索引</span></span><br><span class="line"><span class="built_in">print</span> (df.iloc[<span class="number">2</span>]）<span class="comment">#获取第二行数据 iloc只能接收整数索引</span></span><br><span class="line"><span class="comment">#左闭右开</span></span><br><span class="line">print(df[<span class="number">2</span>:<span class="number">4</span>])</span><br><span class="line"><span class="comment">#在行末追加新数据行</span></span><br><span class="line">df = df.append(df2)</span><br><span class="line"><span class="comment">#调用了drop()方法删除行</span></span><br><span class="line">df = df.drop(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h4 id="其余属性和方法">其余属性和方法</h4><table><thead><tr class="header"><th>名称</th><th>属性&amp;方法描述</th></tr></thead><tbody><tr class="odd"><td>T</td><td>行和列转置。</td></tr><tr class="even"><td>axes</td><td>返回一个仅以行轴标签和列轴标签为成员的列表。</td></tr><tr class="odd"><td>dtypes</td><td>返回每列数据的数据类型。</td></tr><tr class="even"><td>empty</td><td>DataFrame中没有数据或者任意坐标轴的长度为0，则返回True。</td></tr><tr class="odd"><td>ndim</td><td>轴的数量，也指数组的维数。</td></tr><tr class="even"><td>shape</td><td>返回一个元组，表示了 DataFrame 维度。</td></tr><tr class="odd"><td>size</td><td>DataFrame中的元素数量。</td></tr><tr class="even"><td>values</td><td>使用 numpy 数组表示 DataFrame 中的元素值。</td></tr><tr class="odd"><td>head()</td><td>返回前 n 行数据。</td></tr><tr class="even"><td>tail()</td><td>返回后 n 行数据。</td></tr><tr class="odd"><td>shift()</td><td>将行或列移动指定的步幅长度</td></tr></tbody></table><ul><li>要移动某一行/列用shift <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataFrame.shift(periods=<span class="number">1</span>, freq=<span class="literal">None</span>, axis=<span class="number">0</span>)  </span><br></pre></td></tr></table></figure> | 参数名称 | 说明 | |---------- |--------------------------------------------------------------------------| | peroids |类型为int，表示移动的幅度，可以是正数，也可以是负数，默认值为1。 | |freq |日期偏移量，默认值为None，适用于时间序。取值为符合时间规则的字符串。 | |axis | 如果是 0 或者 "index" 表示上下移动，如果是 1 或者 "columns"则会左右移动。 | | fill_value | 该参数用来填充缺失值。 |</li></ul><h2 id="自定义函数">自定义函数</h2><ol type="1"><li>操作整个 DataFrame 的函数：pipe()</li><li>操作行或者列的函数：apply()</li><li>操作单一元素的函数：applymap() ### 操作整个数据表 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#自定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adder</span>(<span class="params">ele1,ele2</span>):</span></span><br><span class="line">   <span class="keyword">return</span> ele1+ele2</span><br><span class="line"><span class="comment">#操作DataFrame</span></span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">4</span>,<span class="number">3</span>),columns=[<span class="string">&#x27;c1&#x27;</span>,<span class="string">&#x27;c2&#x27;</span>,<span class="string">&#x27;c3&#x27;</span>])</span><br><span class="line"><span class="comment">#相加前</span></span><br><span class="line">print(df)</span><br><span class="line"><span class="comment">#相加后</span></span><br><span class="line">print(df.pipe(adder,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">         c1        c2        c3</span><br><span class="line"><span class="number">0</span>  <span class="number">1.989075</span>  <span class="number">0.932426</span> -<span class="number">0.523568</span></span><br><span class="line"><span class="number">1</span> -<span class="number">1.736317</span>  <span class="number">0.703575</span> -<span class="number">0.819940</span></span><br><span class="line"><span class="number">2</span>  <span class="number">0.657279</span> -<span class="number">0.872929</span>  <span class="number">0.040841</span></span><br><span class="line"><span class="number">3</span>  <span class="number">0.441424</span>  <span class="number">1.170723</span> -<span class="number">0.629618</span></span><br><span class="line">         c1        c2        c3</span><br><span class="line"><span class="number">0</span>  <span class="number">4.989075</span>  <span class="number">3.932426</span>  <span class="number">2.476432</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1.263683</span>  <span class="number">3.703575</span>  <span class="number">2.180060</span></span><br><span class="line"><span class="number">2</span>  <span class="number">3.657279</span>  <span class="number">2.127071</span>  <span class="number">3.040841</span></span><br><span class="line"><span class="number">3</span>  <span class="number">3.441424</span>  <span class="number">4.170723</span>  <span class="number">2.370382</span></span><br></pre></td></tr></table></figure> ###操作行或列 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">5</span>,<span class="number">3</span>),columns=[<span class="string">&#x27;col1&#x27;</span>,<span class="string">&#x27;col2&#x27;</span>,<span class="string">&#x27;col3&#x27;</span>])</span><br><span class="line">df.apply(np.mean)</span><br><span class="line"><span class="comment">#默认按列操作，计算每一列均值</span></span><br><span class="line"><span class="built_in">print</span> (df.apply(np.mean))</span><br><span class="line"><span class="comment">#传递轴参 axis=1， 表示逐行进行操作</span></span><br><span class="line"><span class="built_in">print</span> (df.apply(np.mean,axis=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">print(df.apply(<span class="keyword">lambda</span> x: x.<span class="built_in">max</span>() - x.<span class="built_in">min</span>()))</span><br><span class="line">col1    <span class="number">0.277214</span></span><br><span class="line">col2    <span class="number">0.716651</span></span><br><span class="line">col3   -<span class="number">0.250487</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line"><span class="number">0</span>   -<span class="number">0.244641</span></span><br><span class="line"><span class="number">1</span>   -<span class="number">0.209242</span></span><br><span class="line"><span class="number">2</span>   -<span class="number">0.323908</span></span><br><span class="line"><span class="number">3</span>   -<span class="number">0.373431</span></span><br><span class="line"><span class="number">4</span>    <span class="number">0.285771</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">col1    <span class="number">3.538252</span></span><br><span class="line">col2    <span class="number">2.904771</span></span><br><span class="line">col3    <span class="number">2.650892</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure> ### 操作单一元素 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#自定义函数</span></span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">5</span>,<span class="number">3</span>),columns=[<span class="string">&#x27;col1&#x27;</span>,<span class="string">&#x27;col2&#x27;</span>,<span class="string">&#x27;col3&#x27;</span>])</span><br><span class="line">print(df.applymap(<span class="keyword">lambda</span> x:x*<span class="number">10</span>))</span><br><span class="line">print(df.apply(np.mean))</span><br><span class="line"></span><br><span class="line">        col1       col2       col3</span><br><span class="line"><span class="number">0</span>  -<span class="number">1.055926</span>   <span class="number">7.952690</span>  <span class="number">15.225932</span></span><br><span class="line"><span class="number">1</span>   <span class="number">9.362457</span> -<span class="number">12.230732</span>   <span class="number">7.663450</span></span><br><span class="line"><span class="number">2</span>   <span class="number">2.910049</span>  -<span class="number">2.782934</span>   <span class="number">2.073905</span></span><br><span class="line"><span class="number">3</span> -<span class="number">12.008132</span>  -<span class="number">1.444989</span>   <span class="number">5.988144</span></span><br><span class="line"><span class="number">4</span>   <span class="number">2.877850</span>   <span class="number">6.563894</span>   <span class="number">8.192513</span></span><br><span class="line"><span class="comment">#求均值：</span></span><br><span class="line">col1    <span class="number">0.041726</span></span><br><span class="line">col2   -<span class="number">0.038841</span></span><br><span class="line">col3    <span class="number">0.782879</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> Python </tag>
            
            <tag> Data </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Selenium使用手册</title>
      <link href="/2022/03/22/Selenium/"/>
      <url>/2022/03/22/Selenium/</url>
      
        <content type="html"><![CDATA[<p>该文档用于记录平时项目，接单所用到的各种selenium api。</p><h3 id="引入库">引入库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br></pre></td></tr></table></figure><h3 id="打开">打开</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">chrome_path=<span class="string">&#x27;./chromedriver.exe&#x27;</span></span><br><span class="line">option = webdriver.ChromeOptions()</span><br><span class="line">option.add_experimental_option(<span class="string">&#x27;excludeSwitches&#x27;</span>, [<span class="string">&#x27;enable-logging&#x27;</span>])<span class="comment">#禁止打印日志</span></span><br><span class="line">option.add_experimental_option(<span class="string">&#x27;excludeSwitches&#x27;</span>, [<span class="string">&#x27;enable-automation&#x27;</span>])<span class="comment">#实现了规避监测</span></span><br><span class="line"><span class="comment"># option.add_argument(&#x27;--headless&#x27;)  #无头</span></span><br><span class="line"><span class="comment"># option.add_argument(&#x27;--disable-gpu&#x27;) #不使用GPU渲染图像</span></span><br><span class="line">option.add_argument(<span class="string">&#x27;log-level=3&#x27;</span>)  <span class="comment">#不显示无用的警告</span></span><br><span class="line">option.add_argument(<span class="string">&quot;--window-size=1920,1080&quot;</span>) <span class="comment">#设置窗口大小</span></span><br><span class="line">driver = webdriver.Chrome(options=option,executable_path=chrome_path)</span><br><span class="line">driver.maximize_window() <span class="comment">#窗口最大化</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="其他的配置设置">其他的配置设置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">option.add_argument(<span class="string">&quot;--no-sandbox&quot;</span>) <span class="comment">#减少资源占用</span></span><br><span class="line"></span><br><span class="line">prefs = &#123;<span class="string">&#x27;profile.managed_default_content_settings.images&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line">option.add_experimental_option(<span class="string">&#x27;prefs&#x27;</span>,prefs)<span class="comment">#不加载图片</span></span><br><span class="line"></span><br><span class="line">prefs = &#123;<span class="string">&#x27;profile.default_content_settings.popups&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;download.default_directory&#x27;</span>: file_path&#125;</span><br><span class="line">option.add_experimental_option(<span class="string">&#x27;prefs&#x27;</span>, prefs)<span class="comment"># 设定浏览器下载文件后保存的位置</span></span><br></pre></td></tr></table></figure><h3 id="定位方法">定位方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)<span class="comment">#通过id方式定位</span></span><br><span class="line">driver.find_element_by_name(<span class="string">&quot;wd&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)<span class="comment">#通过name方式定位</span></span><br><span class="line">driver.find_element_by_tag_name(<span class="string">&quot;input&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)<span class="comment">#通过tag name 方式定位</span></span><br><span class="line">driver.find_element_by_class_name(<span class="string">&quot;s_ipt&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)<span class="comment">#通过class_name方式定位</span></span><br><span class="line">driver.find_element_by_css_selector(<span class="string">&quot;#kw&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)<span class="comment">#通过css方式定位</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&quot;//input[@id=&#x27;kw&#x27;]&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)<span class="comment">#通过 xpath方式定位</span></span><br></pre></td></tr></table></figure><p>上述方法将<code>element</code>改为<code>elements</code>则可以定位多个控件</p><h3 id="隐性等待">隐性等待</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wait = WebDriverWait(driver, <span class="number">6</span>)</span><br><span class="line">wait.until(EC.presence_of_element_located((By.XPATH, <span class="string">&#x27;//*[@_nk=&quot;hu7r11&quot;]&#x27;</span>)))</span><br></pre></td></tr></table></figure><h3 id="保存cookie和载入cookie">保存cookie和载入cookie</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;login.json&quot;</span>):</span><br><span class="line">    driver.get(<span class="string">&#x27;https://www.qyyjt.cn/&#x27;</span>)</span><br><span class="line">    <span class="comment"># handles = driver.window_handles#获取当前浏览器的所有标签页</span></span><br><span class="line">    <span class="comment"># driver.switch_to_window(handles[-1])#定位到第二个标签页</span></span><br><span class="line">    xx=<span class="built_in">input</span>(<span class="string">&#x27;手动登录以后按回车&#x27;</span>)</span><br><span class="line">    dictCookies = driver.get_cookies()   <span class="comment">#  核心</span></span><br><span class="line">    print(dictCookies)</span><br><span class="line">    jsonCookies = json.dumps(dictCookies)</span><br><span class="line">    print(jsonCookies)</span><br><span class="line">    <span class="comment"># 登录完成后将cookie保存到本地文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;login.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(jsonCookies)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_cookies</span>(<span class="params">driver</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;login.json&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        listCookies = json.loads(f.read())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> cookie <span class="keyword">in</span> listCookies:</span><br><span class="line">      driver.add_cookie(cookie)</span><br><span class="line">    <span class="keyword">return</span> driver</span><br></pre></td></tr></table></figure><h3 id="定位标签页">定位标签页</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">handles = driver.window_handles <span class="comment">#获取当前浏览器的所有标签页</span></span><br><span class="line">driver.switch_to_window(handles[<span class="number">1</span>])<span class="comment">#定位到第二个标签页</span></span><br></pre></td></tr></table></figure><h3 id="滑动页面到指定元素上">滑动页面到指定元素上</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">choose_page2=driver.find_elements_by_xpath(<span class="string">&#x27;//*[@id=&quot;lpBloc&quot;]/li&#x27;</span>)</span><br><span class="line">driver.execute_script(<span class="string">&quot;arguments[0].scrollIntoView();&quot;</span>, choose_page2[-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h3 id="webdriver-的各种操作方法">webdriver 的各种操作方法</h3><table><thead><tr class="header"><th>方法</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>set_window_size()</td><td>设置浏览器的大小</td></tr><tr class="even"><td>back()</td><td>控制浏览器后退</td></tr><tr class="odd"><td>forward()</td><td>控制浏览器前进</td></tr><tr class="even"><td>refresh()</td><td>刷新当前页面</td></tr><tr class="odd"><td>clear()</td><td>清除文本</td></tr><tr class="even"><td>send_keys (value)</td><td>模拟按键输入</td></tr><tr class="odd"><td>click()</td><td>单击元素</td></tr><tr class="even"><td>submit()</td><td>用于提交表单</td></tr><tr class="odd"><td>get_attribute(name)</td><td>获取元素属性值</td></tr><tr class="even"><td>is_displayed()</td><td>设置该元素是否用户可见</td></tr><tr class="odd"><td>size</td><td>返回元素的尺寸</td></tr><tr class="even"><td>text</td><td>获取元素的文本</td></tr><tr class="odd"><td>get()</td><td>打开网址</td></tr><tr class="even"><td>quit()</td><td>退出并关闭webdriver</td></tr></tbody></table><h3 id="鼠标操作">鼠标操作</h3><table><colgroup><col style="width: 24%" /><col style="width: 75%" /></colgroup><thead><tr class="header"><th>方法</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>ActionChains(driver)</td><td>构造ActionChains对象</td></tr><tr class="even"><td>context_click()</td><td>执行鼠标悬停操作</td></tr><tr class="odd"><td>move_to_element(above)</td><td>右击</td></tr><tr class="even"><td>double_click()</td><td>双击</td></tr><tr class="odd"><td>drag_and_drop()</td><td>拖动</td></tr><tr class="even"><td>move_to_element(above)</td><td>执行鼠标悬停操作</td></tr><tr class="odd"><td>context_click()</td><td>用于模拟鼠标右键操作， 在调用时需要指定元素定位</td></tr><tr class="even"><td>perform()</td><td>执行所有 ActionChains中存储的行为，可以理解成是对整个操作的提交动作</td></tr></tbody></table><p>使用方法：<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment">#1.引入 ActionChains 类</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="comment">#2.定位到要悬停的元素</span></span><br><span class="line">element= driver.find_element_by_link_text(<span class="string">&quot;设置&quot;</span>)</span><br><span class="line"><span class="comment">#3.对定位到的元素执行鼠标悬停操作</span></span><br><span class="line">ActionChains(driver).move_to_element(element).perform()</span><br><span class="line"><span class="comment">#找到链接</span></span><br><span class="line">elem1=driver.find_element_by_link_text(<span class="string">&quot;搜索设置&quot;</span>)</span><br><span class="line">elem1.click()</span><br><span class="line"><span class="comment">#通过元素选择器找到id=sh_2,并点击设置</span></span><br><span class="line">elem2=driver.find_element_by_id(<span class="string">&quot;sh_1&quot;</span>)</span><br><span class="line">elem2.click()</span><br><span class="line"><span class="comment">#保存设置</span></span><br><span class="line">elem3=driver.find_element_by_class_name(<span class="string">&quot;prefpanelgo&quot;</span>)</span><br><span class="line">elem3.click()</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="下拉框">下拉框</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th>方法</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>select_by_value(“选择值”)</td><td>select标签的value属性的值</td></tr><tr class="even"><td>select_by_index(“索引值”)</td><td>下拉框的索引</td></tr><tr class="odd"><td>select_by_visible_testx(“文本值”)</td><td>下拉框的文本值</td></tr></tbody></table><p>使用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sel = driver.find_element_by_xpath(<span class="string">&quot;//select[@id=&#x27;nr&#x27;]&quot;</span>)</span><br><span class="line">Select(sel).select_by_value(<span class="string">&#x27;50&#x27;</span>)  <span class="comment"># 显示50条</span></span><br></pre></td></tr></table></figure><h3 id="截图">截图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.get_screenshot_as_file(<span class="string">&quot;D:\\baidu_img.jpg&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背单词小脚本</title>
      <link href="/2022/03/21/words-memory/"/>
      <url>/2022/03/21/words-memory/</url>
      
        <content type="html"><![CDATA[<p>    前段时间在学雅思的时候每天听写王陆的听力语料库，每天都得有100多个错误的单词需要复习，重新听写。但是这么多的单词需要我一个一个去手动查找获取意思和读音无疑是一件极其浪费时间的事情。查找了市面上大部分的背单词软件，都没有一个很好的批量构建单词本的功能。刚好自己又会一点Python，于是决定自己动手写一个符合自己需求的脚本程序。　　### 需求<br />1. 能便捷的导入单词组建自己的单词本 2.可以随机选择听音写词，或看词意拼写单词的功能 3. 对于错误的单词能多次复习4. 能统计每一次复习的正确率<br />### 实现    要说最简单的单词本储存格式那必定是通过txt格式了，随便哪台电脑都能创建打开。python自身就能很好的读取修改txt文件，于是决定以txt作为文本的主要储存格式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f=f.read()</span><br><span class="line">    a=f.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    a = [i <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> i != <span class="string">&#x27;&#x27;</span>]</span><br></pre></td></tr></table></figure><p>    用这样一段代码就能很好的对txt文件进行读取和修改操作。<br />    设定txt中每行为一个单独的单词，遍历单词本的每一行获取单词存入表格中。<br />    接下来就是获取翻译的方法。网上冲浪后比较，用金山词霸的接口会比较适合，金山称霸不仅能返回多个意思，还有词性等信息，相比于百度有道只是单纯返回一个中文的意思更利于我们英语学习者。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_translate_jinshan</span>(<span class="params">word</span>):</span></span><br><span class="line">    url = <span class="string">&quot;https://dict-mobile.iciba.com/interface/index.php?c=word&amp;m=getsuggest&amp;nums=10&amp;is_need_mean=1&amp;word=&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url+word)</span><br><span class="line">        content = json.loads(response.text)</span><br><span class="line">        result = (content[<span class="string">&quot;message&quot;</span>][<span class="number">0</span>][<span class="string">&quot;paraphrase&quot;</span>]).replace(<span class="string">&#x27;，&#x27;</span>,<span class="string">&#x27;、&#x27;</span>).replace(<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;、&#x27;</span>).replace(<span class="string">&#x27;[&#x27;</span>,<span class="string">&#x27;(&#x27;</span>).replace(<span class="string">&#x27;]&#x27;</span>,<span class="string">&#x27;)&#x27;</span>).replace(<span class="string">&#x27;;&#x27;</span>,<span class="string">&#x27;、&#x27;</span>)</span><br><span class="line">        print(<span class="string">&#x27;金山词霸查询结果：&#x27;</span>+result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>短短10行就能进行批量了翻译了，属实是懒人的福音。但是金山的接口对词组的支持不是很友好，很多常见的词组都返回不了结果，因此加上了百度翻译作为补充</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_translate_Baidu</span>(<span class="params">word</span>):</span></span><br><span class="line">    appid = <span class="string">&#x27;百度申请的id&#x27;</span></span><br><span class="line">    appkey = <span class="string">&#x27;百度申请的key&#x27;</span></span><br><span class="line">    from_lang = <span class="string">&#x27;en&#x27;</span></span><br><span class="line">    to_lang =  <span class="string">&#x27;zh&#x27;</span></span><br><span class="line">    endpoint = <span class="string">&#x27;http://api.fanyi.baidu.com&#x27;</span></span><br><span class="line">    path = <span class="string">&#x27;/api/trans/vip/translate&#x27;</span></span><br><span class="line">    url = endpoint + path</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_md5</span>(<span class="params">s, encoding=<span class="string">&#x27;utf-8&#x27;</span></span>):</span></span><br><span class="line">        <span class="keyword">return</span> md5(s.encode(encoding)).hexdigest()</span><br><span class="line">    salt = random.randint(<span class="number">32768</span>, <span class="number">65536</span>)</span><br><span class="line">    sign = make_md5(appid + word + <span class="built_in">str</span>(salt) + appkey)</span><br><span class="line">    headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;</span><br><span class="line">    payload = &#123;<span class="string">&#x27;appid&#x27;</span>: appid, <span class="string">&#x27;q&#x27;</span>: word, <span class="string">&#x27;from&#x27;</span>: from_lang, <span class="string">&#x27;to&#x27;</span>: to_lang, <span class="string">&#x27;salt&#x27;</span>: salt, <span class="string">&#x27;sign&#x27;</span>: sign&#125;</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        r = requests.post(url, params=payload, headers=headers)</span><br><span class="line">        <span class="keyword">try</span>:     </span><br><span class="line">            result = r.json()</span><br><span class="line">            result = (result[<span class="string">&#x27;trans_result&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;dst&#x27;</span>]).replace(<span class="string">&#x27;，&#x27;</span>,<span class="string">&#x27;、&#x27;</span>).replace(<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;、&#x27;</span>).replace(<span class="string">&#x27;[&#x27;</span>,<span class="string">&#x27;(&#x27;</span>).replace(<span class="string">&#x27;]&#x27;</span>,<span class="string">&#x27;)&#x27;</span>).replace(<span class="string">&#x27;;&#x27;</span>,<span class="string">&#x27;、&#x27;</span>)</span><br><span class="line">            print(<span class="string">&#x27;百度查询结果：&#x27;</span>+result)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>通过遍历单词本中每一行判断是否有中文意思，没有则调用方法进行自动搜索并补充到原来的文件上，要是两个接口都不能返回有效数据，则人工进行补充</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;/&#x27;</span><span class="keyword">not</span> <span class="keyword">in</span> i:</span><br><span class="line">        rewrite=<span class="number">1</span></span><br><span class="line">        translate=get_translate_jinshan(i) </span><br><span class="line">        translate=translate <span class="keyword">if</span> translate <span class="keyword">else</span> get_translate_Baidu(i)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> translate:</span><br><span class="line">            print(<span class="string">&#x27;输入中文翻译&#x27;</span>)</span><br><span class="line">            translate=<span class="built_in">input</span>(i+<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        i=i+<span class="string">&#x27;/&#x27;</span>+translate</span><br><span class="line">    filelist.append(i)</span><br></pre></td></tr></table></figure><p>接着是最重要的音频播放功能，主要是为了复习听力的语料库，所以这个是必不可少的。通过浏览器控制台的抓包，获取到有道和百度的免费读音接口<code>http://dict.youdao.com/dictvoice?audio=</code>和<code>https://fanyi.baidu.com/gettts?lan=uk&amp;text=&#123;&#125;&amp;spd=3&amp;source=web</code>,于是同样通过<code>requests</code>库对这两个接口进行访问获取音频数据，将数据用二进制的方法写成MP3格式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_word</span>(<span class="params">word,times</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        filename=<span class="string">&quot;audio/&#123;&#125;.mp3&quot;</span>.<span class="built_in">format</span>(word)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filename):</span><br><span class="line">            data=requests.get(<span class="string">&#x27;http://dict.youdao.com/dictvoice?audio=&#x27;</span>+word,timeout=<span class="number">5</span>).content</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(data)</span><br><span class="line">        playMusic(filename,loops=times)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data=requests.get(<span class="string">&#x27;https://fanyi.baidu.com/gettts?lan=uk&amp;text=&#123;&#125;&amp;spd=3&amp;source=web&#x27;</span>.<span class="built_in">format</span>(word),timeout=<span class="number">5</span>).content</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(data)</span><br><span class="line">            playMusic(filename,loops=times)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">&#x27;没有相关语音&#x27;</span>)</span><br></pre></td></tr></table></figure><p>利用python对音频进行播放，最终选择使用了<code>pygame</code>库，原本是个用来制作游戏的库，但是对音频播放的支持也很好，所以选择了它。使用方法也很简单，按照文档提供参数进行调用就行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">playMusic</span>(<span class="params">filename,loops=<span class="number">0</span>, start=<span class="number">0.0</span>, value=<span class="number">0.5</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param word: 朗读的单词</span></span><br><span class="line"><span class="string">    :param loops: 循环次数</span></span><br><span class="line"><span class="string">    :param start: 从多少秒开始播放</span></span><br><span class="line"><span class="string">    :param value: 设置播放的音量，音量value的范围为0.0到1.0</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    flag = <span class="literal">False</span>  <span class="comment"># 是否播放过</span></span><br><span class="line">    pygame.mixer.init(frequency=<span class="number">111000</span>)  <span class="comment"># 音乐模块初始化</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">            pygame.mixer.music.load(filename)</span><br><span class="line">            <span class="comment"># pygame.mixer.music.play(loops=0, start=0.0) loops和start分别代表重复的次数和开始播放的位置。</span></span><br><span class="line">            pygame.mixer.music.play(loops=loops, start=start)</span><br><span class="line">            pygame.mixer.music.set_volume(value)  <span class="comment"># 来设置播放的音量，音量value的范围为0.0到1.0。</span></span><br><span class="line">        <span class="keyword">if</span> pygame.mixer.music.get_busy() == <span class="literal">True</span>:</span><br><span class="line">            flag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> flag:</span><br><span class="line">                pygame.mixer.music.stop()  <span class="comment"># 停止播放</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    pygame.mixer.quit()</span><br><span class="line">    pygame.quit()</span><br></pre></td></tr></table></figure><p>验证单词拼写是否正常也很简单，通过<code>==</code>进行判断就好，最后加上统计正确率，并且生成统计图的功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;以往数据/&quot;</span>+<span class="built_in">str</span>(order)+<span class="string">&quot;错误单词.txt&quot;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    tu_y=[]</span><br><span class="line">    tu_x=[]</span><br><span class="line">    time_f=[]</span><br><span class="line">    fi=f.read()</span><br><span class="line">    fil=fi.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> fil[:-<span class="number">1</span>]:</span><br><span class="line">        time_f.append(i.split(<span class="string">&#x27;;&#x27;</span>)[:-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> time_f:</span><br><span class="line">        tu_y.append(<span class="built_in">round</span>(((<span class="built_in">len</span>(result)-<span class="built_in">len</span>(i))/<span class="built_in">len</span>(result)),<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tu_y)):</span><br><span class="line">        tu_x.append(<span class="built_in">int</span>(j)+<span class="number">1</span>)</span><br><span class="line">    pl.title(<span class="string">&#x27;unit &#x27;</span>+order)</span><br><span class="line">    pl.xlabel(<span class="string">&quot;time&quot;</span>)</span><br><span class="line">    pl.ylabel(<span class="string">&quot;accuracy&quot;</span>)</span><br><span class="line">    pl.plot(tu_x,tu_y)</span><br><span class="line">    <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(tu_x,tu_y):</span><br><span class="line">        pl.text(i,j,j,ha=<span class="string">&#x27;center&#x27;</span>,va=<span class="string">&#x27;bottom&#x27;</span>,fontsize=<span class="number">11</span>)</span><br><span class="line">    pl.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="成品">成品</h3><p>最后用<code>pyinstaller</code>进行打包，下面是运行的截图<br /><imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220321/开始.12qk88sokwhc.webp"alt="开始" /><br /><imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220321/运行.c9q4kifz9e8.webp"alt="运行" /><br /><imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220321/统计图.4vo2apqiw0o0.webp"alt="统计图" /><br /><imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220321/单词本.6ouglifr8ck0.webp"alt="单词本" /></p><p>完整的代码可以移步<ahref="https://github.com/waterkingest/Words_memory">github仓库</a>进行查看，有改进的建议，或者疑问欢迎留言或提交issues。</p>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>年轻人的第一把客制键盘</title>
      <link href="/2022/03/20/KeyBoard/"/>
      <url>/2022/03/20/KeyBoard/</url>
      
        <content type="html"><![CDATA[<p>    终于是考完了雅思，忙完了申请，结果看B站上的客制键盘视频中毒了。首先是看到首页喵喵折推荐客制机械键盘的视频，从配列，轴体，键帽无一不吸引着我，仿佛让我找到了小时候对拼乐高的那一种热情。从那天开始，几乎每天都能刷10多个关于机械键盘，客制化的视频。从键盘结构，到轴体，到键帽，几乎看遍了网上在售的所有热门商品。正好大学那用了4年的雷神键盘如今也已经廉颇老矣，无数的按键出现双击，于是决定入坑客制化了。<imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220320/informationEn.1pcnucea1puo.webp"alt="informationEn" /> <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220320/informationZH.ermfwke49nk.webp"alt="informationZH" />    从网上看到了这个图觉得也就那样嘛，一张图就能概括了，买一个就能毕业。结果刷到了<ahref="https://www.zfrontier.com/">ZF</a>这个论坛,发现事情没有这么简单😂。什么<strong>Matrix</strong>,楠总的<strong>CrazyCat</strong>,个个都几千上万，属实是颠覆了我对键盘的认知。就连键盘上面的键帽也能卖到1k+。(人生清单上又加了一条，以后能不眨眼的购买客制键盘)</p><p>    最后迫于现实的压力(<del>还没找工作</del>),选择了一个最具性价比的套件光头75V3。75%配列的键盘属实是满足了我对键盘的所有需求，不像全键盘那样庞大，笨重，该有的功能键都有。对比了NJ80，akkopc75(<del>都是便宜的国产牌子</del>)，最终还是选择了有一定拼装体验的类Gasket秃驴75,(<del>最便宜,要自己折腾</del>)。+ 买了些工具开始准备组装。 <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220320/tools.66dtueh88740.webp"alt="tools" /> + 选了便宜货佳达隆G银Pro。 <imgsrc="https://www.gateron.cn/repository/image/nqzvuqKhTA27mqcF2x2nKA.jpg_640xaf.jpg"alt="轴" /> + 最终成果。 <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220320/necked.67uzzg8cd4k0.webp"alt="necked" /> + 配上小高选的键帽。 <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220320/overall.20zx6ycpwmv4.webp"alt="overall" /> + 还有在店铺中一眼相中的小麦塔金。 <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220320/point.2tu10bprzl40.webp"alt="point" /></p><p>    对于将这个光头75作为我的第一个入门客制化的键盘，我觉得还是很满意的，首先相对于别的大牌子有着很高的性价比(低于1000),其次，有着类似如今键圈最火的Gasket结构，稍微自己魔改一下能改成正宗Gasket结构，在自己手动润了一下卫星轴的情况下，确实有点网上所说的麻将音的感觉。</p><p>最后放上几个我看到就走不动道的Matrix <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220320/lpq3s7X9dnfy1tmonmHMvWIQUzlk.19719x0q240w.webp"alt="lpq3s7X9dnfy1tmonmHMvWIQUzlk" /> <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220320/FuRWb2kVtkTH2soobyuyY5yPww72.173bebsfz0cg.webp"alt="FuRWb2kVtkTH2soobyuyY5yPww72" /> <imgsrc="https://cdn.jsdelivr.net/gh/waterkingest/image_bed@master/20220320/FtskccDBGhuzj0ZvkT9emKHnJoyq.2f7qkcp4zwbo.webp"alt="FtskccDBGhuzj0ZvkT9emKHnJoyq" /> 希望以后能拥有几个</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LIFE </tag>
            
            <tag> EQUIPMENT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新的开始</title>
      <link href="/2022/03/20/newstar/"/>
      <url>/2022/03/20/newstar/</url>
      
        <content type="html"><![CDATA[<h1id="终于基本忙完申请今天开始慢慢写博客记录一下">终于基本忙完申请，今天开始慢慢写博客，记录一下！</h1>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LIFE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Begining</title>
      <link href="/2021/01/27/first/"/>
      <url>/2021/01/27/first/</url>
      
        <content type="html"><![CDATA[<h1id="今天是小陈在公司划水终于开通blog的第一天纪念一下">今天是小陈在公司划水终于开通blog的第一天，纪念一下</h1>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
